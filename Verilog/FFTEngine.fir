circuit FFTEngine :
  module FFTTwiddle :
    output io : { flip nk : UInt, flip twiLutCaseIndex : UInt, wR : Fixed<12><<0>>, wI : Fixed<12><<0>>}

    wire twi_cos_tb1_p10 : Fixed<12><<0>>[8] @[FFTTwiddle.scala 33:34]
    twi_cos_tb1_p10[0] <= asFixedPoint(UInt<12>("h0"), 0) @[FFTTwiddle.scala 33:34]
    twi_cos_tb1_p10[1] <= asFixedPoint(UInt<12>("h0"), 0) @[FFTTwiddle.scala 33:34]
    twi_cos_tb1_p10[2] <= asFixedPoint(UInt<12>("h0"), 0) @[FFTTwiddle.scala 33:34]
    twi_cos_tb1_p10[3] <= asFixedPoint(UInt<12>("h0"), 0) @[FFTTwiddle.scala 33:34]
    twi_cos_tb1_p10[4] <= asFixedPoint(UInt<12>("h0"), 0) @[FFTTwiddle.scala 33:34]
    twi_cos_tb1_p10[5] <= asFixedPoint(UInt<12>("h0"), 0) @[FFTTwiddle.scala 33:34]
    twi_cos_tb1_p10[6] <= asFixedPoint(UInt<12>("h0"), 0) @[FFTTwiddle.scala 33:34]
    twi_cos_tb1_p10[7] <= asFixedPoint(UInt<12>("h0"), 0) @[FFTTwiddle.scala 33:34]
    wire twi_sin_tb1_p10 : Fixed<12><<0>>[8] @[FFTTwiddle.scala 34:34]
    twi_sin_tb1_p10[0] <= asFixedPoint(UInt<12>("h0"), 0) @[FFTTwiddle.scala 34:34]
    twi_sin_tb1_p10[1] <= asFixedPoint(UInt<12>("h0"), 0) @[FFTTwiddle.scala 34:34]
    twi_sin_tb1_p10[2] <= asFixedPoint(UInt<12>("h0"), 0) @[FFTTwiddle.scala 34:34]
    twi_sin_tb1_p10[3] <= asFixedPoint(UInt<12>("h0"), 0) @[FFTTwiddle.scala 34:34]
    twi_sin_tb1_p10[4] <= asFixedPoint(UInt<12>("h0"), 0) @[FFTTwiddle.scala 34:34]
    twi_sin_tb1_p10[5] <= asFixedPoint(UInt<12>("h0"), 0) @[FFTTwiddle.scala 34:34]
    twi_sin_tb1_p10[6] <= asFixedPoint(UInt<12>("h0"), 0) @[FFTTwiddle.scala 34:34]
    twi_sin_tb1_p10[7] <= asFixedPoint(UInt<12>("h0"), 0) @[FFTTwiddle.scala 34:34]
    node _idx_r_T = bits(io.nk, 2, 2) @[FFTTwiddle.scala 36:27]
    node _idx_r_T_1 = bits(io.nk, 1, 0) @[FFTTwiddle.scala 36:50]
    node _idx_r_T_2 = orr(_idx_r_T_1) @[FFTTwiddle.scala 36:73]
    node _idx_r_T_3 = and(_idx_r_T, _idx_r_T_2) @[FFTTwiddle.scala 36:43]
    node _idx_r_T_4 = not(io.nk) @[FFTTwiddle.scala 36:80]
    node _idx_r_T_5 = add(_idx_r_T_4, UInt<1>("h1")) @[FFTTwiddle.scala 36:87]
    node _idx_r_T_6 = tail(_idx_r_T_5, 1) @[FFTTwiddle.scala 36:87]
    node idx_r = mux(_idx_r_T_3, _idx_r_T_6, io.nk) @[FFTTwiddle.scala 36:20]
    node _lut_chg_sign_flag_r_T = bits(io.nk, 2, 2) @[FFTTwiddle.scala 38:36]
    node _lut_chg_sign_flag_r_T_1 = bits(io.nk, 1, 0) @[FFTTwiddle.scala 38:60]
    node _lut_chg_sign_flag_r_T_2 = orr(_lut_chg_sign_flag_r_T_1) @[FFTTwiddle.scala 38:83]
    node lut_chg_sign_flag_r = and(_lut_chg_sign_flag_r_T, _lut_chg_sign_flag_r_T_2) @[FFTTwiddle.scala 38:52]
    node _lut_w_r_T = or(idx_r, UInt<3>("h0"))
    node _lut_w_r_T_1 = bits(_lut_w_r_T, 2, 0)
    node idx_i = bits(idx_r, 2, 0) @[FFTTwiddle.scala 42:22]
    node _chg_sign_flag_r_T = eq(io.twiLutCaseIndex, UInt<2>("h2")) @[FFTTwiddle.scala 48:51]
    node _chg_sign_flag_r_T_1 = eq(lut_chg_sign_flag_r, UInt<1>("h0")) @[FFTTwiddle.scala 48:61]
    node chg_sign_flag_r = mux(_chg_sign_flag_r_T, _chg_sign_flag_r_T_1, lut_chg_sign_flag_r) @[FFTTwiddle.scala 48:30]
    node _chg_sign_flag_i_T = eq(io.twiLutCaseIndex, UInt<1>("h1")) @[FFTTwiddle.scala 49:51]
    node _chg_sign_flag_i_T_1 = eq(UInt<1>("h1"), UInt<1>("h0")) @[FFTTwiddle.scala 49:61]
    node chg_sign_flag_i = mux(_chg_sign_flag_i_T, _chg_sign_flag_i_T_1, UInt<1>("h1")) @[FFTTwiddle.scala 49:30]
    node _io_wR_T = sub(asFixedPoint(UInt<1>("h0"), 0), twi_cos_tb1_p10[_lut_w_r_T_1]) @[FFTTwiddle.scala 51:35]
    node _io_wR_T_1 = tail(_io_wR_T, 1) @[FFTTwiddle.scala 51:35]
    node _io_wR_T_2 = asFixedPoint(_io_wR_T_1, 0) @[FFTTwiddle.scala 51:35]
    node _io_wR_T_3 = mux(chg_sign_flag_r, _io_wR_T_2, twi_cos_tb1_p10[_lut_w_r_T_1]) @[FFTTwiddle.scala 51:17]
    io.wR <= _io_wR_T_3 @[FFTTwiddle.scala 51:11]
    node _io_wI_T = sub(asFixedPoint(UInt<1>("h0"), 0), twi_sin_tb1_p10[idx_i]) @[FFTTwiddle.scala 52:35]
    node _io_wI_T_1 = tail(_io_wI_T, 1) @[FFTTwiddle.scala 52:35]
    node _io_wI_T_2 = asFixedPoint(_io_wI_T_1, 0) @[FFTTwiddle.scala 52:35]
    node _io_wI_T_3 = mux(chg_sign_flag_i, _io_wI_T_2, twi_sin_tb1_p10[idx_i]) @[FFTTwiddle.scala 52:17]
    io.wI <= _io_wI_T_3 @[FFTTwiddle.scala 52:11]

  module FFT3PipelineCalc :
    input clock : Clock
    input reset : Reset
    output io : { flip dataInSR : Fixed<16><<0>>, flip dataInSI : Fixed<16><<0>>, flip dataInTR : Fixed<16><<0>>, flip dataInTI : Fixed<16><<0>>, dataOutSR3c : Fixed<16><<0>>, dataOutSI3c : Fixed<16><<0>>, dataOutTR3c : Fixed<16><<0>>, dataOutTI3c : Fixed<16><<0>>, flip nk : UInt, flip rShiftSym : UInt<1>, flip isFFT : UInt<1>, flip procMode : UInt<1>, flip state1c : UInt<1>, flip state2c : UInt<1>}

    clock is invalid
    reset is invalid
    io is invalid
    node _dataInSRRnd_T = bits(io.dataInSR, 15, 15) @[FFT3PipelineCalc.scala 29:38]
    node _dataInSRRnd_T_1 = bits(io.dataInSR, 15, 1) @[FFT3PipelineCalc.scala 29:69]
    node _dataInSRRnd_T_2 = cat(_dataInSRRnd_T, _dataInSRRnd_T_1) @[Cat.scala 33:92]
    node _dataInSRRnd_T_3 = mux(UInt<1>("h0"), UInt<15>("h7fff"), UInt<15>("h0")) @[Bitwise.scala 77:12]
    node _dataInSRRnd_T_4 = bits(io.dataInSR, 0, 0) @[FFT3PipelineCalc.scala 29:138]
    node _dataInSRRnd_T_5 = cat(_dataInSRRnd_T_3, _dataInSRRnd_T_4) @[Cat.scala 33:92]
    node _dataInSRRnd_T_6 = add(_dataInSRRnd_T_2, _dataInSRRnd_T_5) @[FFT3PipelineCalc.scala 29:92]
    node dataInSRRnd = tail(_dataInSRRnd_T_6, 1) @[FFT3PipelineCalc.scala 29:92]
    node _dataInSIRnd_T = bits(io.dataInSI, 15, 15) @[FFT3PipelineCalc.scala 30:38]
    node _dataInSIRnd_T_1 = bits(io.dataInSI, 15, 1) @[FFT3PipelineCalc.scala 30:69]
    node _dataInSIRnd_T_2 = cat(_dataInSIRnd_T, _dataInSIRnd_T_1) @[Cat.scala 33:92]
    node _dataInSIRnd_T_3 = mux(UInt<1>("h0"), UInt<15>("h7fff"), UInt<15>("h0")) @[Bitwise.scala 77:12]
    node _dataInSIRnd_T_4 = bits(io.dataInSI, 0, 0) @[FFT3PipelineCalc.scala 30:138]
    node _dataInSIRnd_T_5 = cat(_dataInSIRnd_T_3, _dataInSIRnd_T_4) @[Cat.scala 33:92]
    node _dataInSIRnd_T_6 = add(_dataInSIRnd_T_2, _dataInSIRnd_T_5) @[FFT3PipelineCalc.scala 30:92]
    node dataInSIRnd = tail(_dataInSIRnd_T_6, 1) @[FFT3PipelineCalc.scala 30:92]
    node _dataInTRRnd_T = bits(io.dataInTR, 15, 15) @[FFT3PipelineCalc.scala 31:38]
    node _dataInTRRnd_T_1 = bits(io.dataInTR, 15, 1) @[FFT3PipelineCalc.scala 31:69]
    node _dataInTRRnd_T_2 = cat(_dataInTRRnd_T, _dataInTRRnd_T_1) @[Cat.scala 33:92]
    node _dataInTRRnd_T_3 = mux(UInt<1>("h0"), UInt<15>("h7fff"), UInt<15>("h0")) @[Bitwise.scala 77:12]
    node _dataInTRRnd_T_4 = bits(io.dataInTR, 0, 0) @[FFT3PipelineCalc.scala 31:138]
    node _dataInTRRnd_T_5 = cat(_dataInTRRnd_T_3, _dataInTRRnd_T_4) @[Cat.scala 33:92]
    node _dataInTRRnd_T_6 = add(_dataInTRRnd_T_2, _dataInTRRnd_T_5) @[FFT3PipelineCalc.scala 31:92]
    node dataInTRRnd = tail(_dataInTRRnd_T_6, 1) @[FFT3PipelineCalc.scala 31:92]
    node _dataInTIRnd_T = bits(io.dataInTI, 15, 15) @[FFT3PipelineCalc.scala 32:38]
    node _dataInTIRnd_T_1 = bits(io.dataInTI, 15, 1) @[FFT3PipelineCalc.scala 32:69]
    node _dataInTIRnd_T_2 = cat(_dataInTIRnd_T, _dataInTIRnd_T_1) @[Cat.scala 33:92]
    node _dataInTIRnd_T_3 = mux(UInt<1>("h0"), UInt<15>("h7fff"), UInt<15>("h0")) @[Bitwise.scala 77:12]
    node _dataInTIRnd_T_4 = bits(io.dataInTI, 0, 0) @[FFT3PipelineCalc.scala 32:138]
    node _dataInTIRnd_T_5 = cat(_dataInTIRnd_T_3, _dataInTIRnd_T_4) @[Cat.scala 33:92]
    node _dataInTIRnd_T_6 = add(_dataInTIRnd_T_2, _dataInTIRnd_T_5) @[FFT3PipelineCalc.scala 32:92]
    node dataInTIRnd = tail(_dataInTIRnd_T_6, 1) @[FFT3PipelineCalc.scala 32:92]
    node _dataInSR1c_T = asFixedPoint(dataInSRRnd, 0) @[FFT3PipelineCalc.scala 34:64]
    node dataInSR1c = mux(io.rShiftSym, _dataInSR1c_T, io.dataInSR) @[FFT3PipelineCalc.scala 34:25]
    node _dataInSI1c_T = asFixedPoint(dataInSIRnd, 0) @[FFT3PipelineCalc.scala 35:64]
    node dataInSI1c = mux(io.rShiftSym, _dataInSI1c_T, io.dataInSI) @[FFT3PipelineCalc.scala 35:25]
    node _dataInTR1c_T = asFixedPoint(dataInTRRnd, 0) @[FFT3PipelineCalc.scala 36:64]
    node dataInTR1c = mux(io.rShiftSym, _dataInTR1c_T, io.dataInTR) @[FFT3PipelineCalc.scala 36:25]
    node _dataInTI1c_T = asFixedPoint(dataInTIRnd, 0) @[FFT3PipelineCalc.scala 37:64]
    node dataInTI1c = mux(io.rShiftSym, _dataInTI1c_T, io.dataInTI) @[FFT3PipelineCalc.scala 37:25]
    reg nk1c : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when UInt<1>("h1") : @[Reg.scala 36:18]
      nk1c <= io.nk @[Reg.scala 36:22]
    node twiLutCaseIdx1c = mux(io.isFFT, UInt<2>("h0"), UInt<2>("h1")) @[FFT3PipelineCalc.scala 43:30]
    inst fftTwiddle of FFTTwiddle @[FFT3PipelineCalc.scala 45:28]
    fftTwiddle.io.nk <= nk1c @[FFT3PipelineCalc.scala 46:22]
    fftTwiddle.io.twiLutCaseIndex <= twiLutCaseIdx1c @[FFT3PipelineCalc.scala 47:35]
    reg sR2c : Fixed<16><<0>>, clock with :
      reset => (reset, asFixedPoint(UInt<16>("h0"), 0)) @[Reg.scala 35:20]
    when io.state1c : @[Reg.scala 36:18]
      sR2c <= dataInSR1c @[Reg.scala 36:22]
    reg sI2c : Fixed<16><<0>>, clock with :
      reset => (reset, asFixedPoint(UInt<16>("h0"), 0)) @[Reg.scala 35:20]
    when io.state1c : @[Reg.scala 36:18]
      sI2c <= dataInSI1c @[Reg.scala 36:22]
    reg qR2cProc : Fixed<16><<0>>, clock with :
      reset => (reset, asFixedPoint(UInt<16>("h0"), 0)) @[Reg.scala 35:20]
    when io.state1c : @[Reg.scala 36:18]
      qR2cProc <= dataInTR1c @[Reg.scala 36:22]
    reg tI2c : Fixed<16><<0>>, clock with :
      reset => (reset, asFixedPoint(UInt<16>("h0"), 0)) @[Reg.scala 35:20]
    when io.state1c : @[Reg.scala 36:18]
      tI2c <= dataInTI1c @[Reg.scala 36:22]
    node _wR2c_T = shl(fftTwiddle.io.wR, 4) @[FFT3PipelineCalc.scala 55:35]
    reg wR2c : Fixed<17><<0>>, clock with :
      reset => (reset, asFixedPoint(UInt<17>("h0"), 0)) @[Reg.scala 35:20]
    when io.state1c : @[Reg.scala 36:18]
      wR2c <= _wR2c_T @[Reg.scala 36:22]
    node _wI2c_T = shl(fftTwiddle.io.wI, 4) @[FFT3PipelineCalc.scala 56:35]
    reg wI2c : Fixed<17><<0>>, clock with :
      reset => (reset, asFixedPoint(UInt<17>("h0"), 0)) @[Reg.scala 35:20]
    when io.state1c : @[Reg.scala 36:18]
      wI2c <= _wI2c_T @[Reg.scala 36:22]
    node _addTRI_T = add(qR2cProc, tI2c) @[FFT3PipelineCalc.scala 58:23]
    node _addTRI_T_1 = tail(_addTRI_T, 1) @[FFT3PipelineCalc.scala 58:23]
    node addTRI = asFixedPoint(_addTRI_T_1, 0) @[FFT3PipelineCalc.scala 58:23]
    node _addWRI_T = add(wR2c, wI2c) @[FFT3PipelineCalc.scala 59:23]
    node _addWRI_T_1 = tail(_addWRI_T, 1) @[FFT3PipelineCalc.scala 59:23]
    node addWRI = asFixedPoint(_addWRI_T_1, 0) @[FFT3PipelineCalc.scala 59:23]
    node multS = mul(addTRI, addWRI) @[FFT3PipelineCalc.scala 64:24]
    node multR = mul(qR2cProc, wR2c) @[FFT3PipelineCalc.scala 66:25]
    node multI = mul(tI2c, wI2c) @[FFT3PipelineCalc.scala 69:25]
    node _qR2cKernel_T = sub(multR, multI) @[FFT3PipelineCalc.scala 72:28]
    node _qR2cKernel_T_1 = tail(_qR2cKernel_T, 1) @[FFT3PipelineCalc.scala 72:28]
    node qR2cKernel = asFixedPoint(_qR2cKernel_T_1, 0) @[FFT3PipelineCalc.scala 72:28]
    node _qI2cKernel_T = sub(multS, multR) @[FFT3PipelineCalc.scala 73:28]
    node _qI2cKernel_T_1 = tail(_qI2cKernel_T, 1) @[FFT3PipelineCalc.scala 73:28]
    node _qI2cKernel_T_2 = asFixedPoint(_qI2cKernel_T_1, 0) @[FFT3PipelineCalc.scala 73:28]
    node _qI2cKernel_T_3 = sub(_qI2cKernel_T_2, multI) @[FFT3PipelineCalc.scala 73:36]
    node _qI2cKernel_T_4 = tail(_qI2cKernel_T_3, 1) @[FFT3PipelineCalc.scala 73:36]
    node qI2cKernel = asFixedPoint(_qI2cKernel_T_4, 0) @[FFT3PipelineCalc.scala 73:36]
    node _qI2cProc_T = sub(asFixedPoint(UInt<1>("h0"), 0), tI2c) @[FFT3PipelineCalc.scala 76:20]
    node _qI2cProc_T_1 = tail(_qI2cProc_T, 1) @[FFT3PipelineCalc.scala 76:20]
    node qI2cProc = asFixedPoint(_qI2cProc_T_1, 0) @[FFT3PipelineCalc.scala 76:20]
    node qR2c = mux(io.procMode, qR2cProc, qR2cKernel) @[FFT3PipelineCalc.scala 78:19]
    node qI2c = mux(io.procMode, qI2cProc, qI2cKernel) @[FFT3PipelineCalc.scala 79:19]
    reg sR3c : Fixed<16><<0>>, clock with :
      reset => (reset, asFixedPoint(UInt<16>("h0"), 0)) @[Reg.scala 35:20]
    when io.state2c : @[Reg.scala 36:18]
      sR3c <= sR2c @[Reg.scala 36:22]
    reg sI3c : Fixed<16><<0>>, clock with :
      reset => (reset, asFixedPoint(UInt<16>("h0"), 0)) @[Reg.scala 35:20]
    when io.state2c : @[Reg.scala 36:18]
      sI3c <= sI2c @[Reg.scala 36:22]
    reg qR3c : Fixed<33><<0>>, clock with :
      reset => (reset, asFixedPoint(UInt<33>("h0"), 0)) @[Reg.scala 35:20]
    when io.state2c : @[Reg.scala 36:18]
      qR3c <= qR2c @[Reg.scala 36:22]
    reg qI3c : Fixed<33><<0>>, clock with :
      reset => (reset, asFixedPoint(UInt<33>("h0"), 0)) @[Reg.scala 35:20]
    when io.state2c : @[Reg.scala 36:18]
      qI3c <= qI2c @[Reg.scala 36:22]
    node _xR3cPrePre_T = add(sR3c, qR3c) @[FFT3PipelineCalc.scala 87:27]
    node _xR3cPrePre_T_1 = tail(_xR3cPrePre_T, 1) @[FFT3PipelineCalc.scala 87:27]
    node xR3cPrePre = asFixedPoint(_xR3cPrePre_T_1, 0) @[FFT3PipelineCalc.scala 87:27]
    node _xI3cPrePre_T = add(sI3c, qI3c) @[FFT3PipelineCalc.scala 88:27]
    node _xI3cPrePre_T_1 = tail(_xI3cPrePre_T, 1) @[FFT3PipelineCalc.scala 88:27]
    node xI3cPrePre = asFixedPoint(_xI3cPrePre_T_1, 0) @[FFT3PipelineCalc.scala 88:27]
    node _xR3cPre_T = bits(xR3cPrePre, 32, 17) @[FFT3PipelineCalc.scala 90:29]
    node xR3cPre = asFixedPoint(_xR3cPre_T, 0) @[FFT3PipelineCalc.scala 90:111]
    node _xI3cPre_T = bits(xI3cPrePre, 32, 17) @[FFT3PipelineCalc.scala 91:29]
    node xI3cPre = asFixedPoint(_xI3cPre_T, 0) @[FFT3PipelineCalc.scala 91:111]
    node _xR3c_T = bits(sR3c, 15, 15) @[FFT3PipelineCalc.scala 93:25]
    node _xR3c_T_1 = bits(qR3c, 32, 32) @[FFT3PipelineCalc.scala 93:53]
    node _xR3c_T_2 = eq(_xR3c_T, _xR3c_T_1) @[FFT3PipelineCalc.scala 93:45]
    node _xR3c_T_3 = bits(sR3c, 15, 15) @[FFT3PipelineCalc.scala 93:82]
    node _xR3c_T_4 = bits(xR3cPre, 15, 15) @[FFT3PipelineCalc.scala 93:113]
    node _xR3c_T_5 = neq(_xR3c_T_3, _xR3c_T_4) @[FFT3PipelineCalc.scala 93:102]
    node _xR3c_T_6 = and(_xR3c_T_2, _xR3c_T_5) @[FFT3PipelineCalc.scala 93:74]
    node _xR3c_T_7 = bits(xR3cPre, 15, 15) @[FFT3PipelineCalc.scala 93:149]
    node _xR3c_T_8 = bits(xR3cPre, 15, 15) @[FFT3PipelineCalc.scala 93:204]
    node _xR3c_T_9 = bits(_xR3c_T_8, 0, 0) @[Bitwise.scala 77:15]
    node _xR3c_T_10 = mux(_xR3c_T_9, UInt<15>("h7fff"), UInt<15>("h0")) @[Bitwise.scala 77:12]
    node _xR3c_T_11 = not(_xR3c_T_10) @[FFT3PipelineCalc.scala 93:173]
    node _xR3c_T_12 = cat(_xR3c_T_7, _xR3c_T_11) @[Cat.scala 33:92]
    node _xR3c_T_13 = asFixedPoint(_xR3c_T_12, 0) @[FFT3PipelineCalc.scala 93:241]
    node xR3c = mux(_xR3c_T_6, _xR3c_T_13, xR3cPre) @[FFT3PipelineCalc.scala 93:19]
    node _xI3c_T = bits(sI3c, 15, 15) @[FFT3PipelineCalc.scala 94:25]
    node _xI3c_T_1 = bits(qI3c, 32, 32) @[FFT3PipelineCalc.scala 94:53]
    node _xI3c_T_2 = eq(_xI3c_T, _xI3c_T_1) @[FFT3PipelineCalc.scala 94:45]
    node _xI3c_T_3 = bits(sI3c, 15, 15) @[FFT3PipelineCalc.scala 94:82]
    node _xI3c_T_4 = bits(xI3cPre, 15, 15) @[FFT3PipelineCalc.scala 94:113]
    node _xI3c_T_5 = neq(_xI3c_T_3, _xI3c_T_4) @[FFT3PipelineCalc.scala 94:102]
    node _xI3c_T_6 = and(_xI3c_T_2, _xI3c_T_5) @[FFT3PipelineCalc.scala 94:74]
    node _xI3c_T_7 = bits(xI3cPre, 15, 15) @[FFT3PipelineCalc.scala 94:149]
    node _xI3c_T_8 = bits(xI3cPre, 15, 15) @[FFT3PipelineCalc.scala 94:204]
    node _xI3c_T_9 = bits(_xI3c_T_8, 0, 0) @[Bitwise.scala 77:15]
    node _xI3c_T_10 = mux(_xI3c_T_9, UInt<15>("h7fff"), UInt<15>("h0")) @[Bitwise.scala 77:12]
    node _xI3c_T_11 = not(_xI3c_T_10) @[FFT3PipelineCalc.scala 94:173]
    node _xI3c_T_12 = cat(_xI3c_T_7, _xI3c_T_11) @[Cat.scala 33:92]
    node _xI3c_T_13 = asFixedPoint(_xI3c_T_12, 0) @[FFT3PipelineCalc.scala 94:241]
    node xI3c = mux(_xI3c_T_6, _xI3c_T_13, xI3cPre) @[FFT3PipelineCalc.scala 94:19]
    node _io_dataOutSR3c_T = asFixedPoint(xR3c, 0) @[FFT3PipelineCalc.scala 96:40]
    io.dataOutSR3c <= _io_dataOutSR3c_T @[FFT3PipelineCalc.scala 96:20]
    node _io_dataOutSI3c_T = asFixedPoint(xI3c, 0) @[FFT3PipelineCalc.scala 97:40]
    io.dataOutSI3c <= _io_dataOutSI3c_T @[FFT3PipelineCalc.scala 97:20]
    node _yR3cPre_T = sub(sR3c, qR3c) @[FFT3PipelineCalc.scala 99:24]
    node _yR3cPre_T_1 = tail(_yR3cPre_T, 1) @[FFT3PipelineCalc.scala 99:24]
    node yR3cPre = asFixedPoint(_yR3cPre_T_1, 0) @[FFT3PipelineCalc.scala 99:24]
    node _yI3cPre_T = sub(sI3c, qI3c) @[FFT3PipelineCalc.scala 100:24]
    node _yI3cPre_T_1 = tail(_yI3cPre_T, 1) @[FFT3PipelineCalc.scala 100:24]
    node yI3cPre = asFixedPoint(_yI3cPre_T_1, 0) @[FFT3PipelineCalc.scala 100:24]
    node _yR3c_T = bits(sR3c, 15, 15) @[FFT3PipelineCalc.scala 102:25]
    node _yR3c_T_1 = bits(qR3c, 32, 32) @[FFT3PipelineCalc.scala 102:53]
    node _yR3c_T_2 = neq(_yR3c_T, _yR3c_T_1) @[FFT3PipelineCalc.scala 102:45]
    node _yR3c_T_3 = bits(sR3c, 15, 15) @[FFT3PipelineCalc.scala 102:82]
    node _yR3c_T_4 = bits(yR3cPre, 32, 32) @[FFT3PipelineCalc.scala 102:113]
    node _yR3c_T_5 = neq(_yR3c_T_3, _yR3c_T_4) @[FFT3PipelineCalc.scala 102:102]
    node _yR3c_T_6 = and(_yR3c_T_2, _yR3c_T_5) @[FFT3PipelineCalc.scala 102:74]
    node _yR3c_T_7 = bits(yR3cPre, 32, 32) @[FFT3PipelineCalc.scala 102:149]
    node _yR3c_T_8 = bits(yR3cPre, 32, 32) @[FFT3PipelineCalc.scala 102:204]
    node _yR3c_T_9 = bits(_yR3c_T_8, 0, 0) @[Bitwise.scala 77:15]
    node _yR3c_T_10 = mux(_yR3c_T_9, UInt<15>("h7fff"), UInt<15>("h0")) @[Bitwise.scala 77:12]
    node _yR3c_T_11 = not(_yR3c_T_10) @[FFT3PipelineCalc.scala 102:173]
    node _yR3c_T_12 = cat(_yR3c_T_7, _yR3c_T_11) @[Cat.scala 33:92]
    node _yR3c_T_13 = asFixedPoint(_yR3c_T_12, 0) @[FFT3PipelineCalc.scala 102:241]
    node yR3c = mux(_yR3c_T_6, _yR3c_T_13, yR3cPre) @[FFT3PipelineCalc.scala 102:19]
    node _yI3c_T = bits(sI3c, 15, 15) @[FFT3PipelineCalc.scala 103:25]
    node _yI3c_T_1 = bits(qI3c, 32, 32) @[FFT3PipelineCalc.scala 103:53]
    node _yI3c_T_2 = neq(_yI3c_T, _yI3c_T_1) @[FFT3PipelineCalc.scala 103:45]
    node _yI3c_T_3 = bits(sI3c, 15, 15) @[FFT3PipelineCalc.scala 103:82]
    node _yI3c_T_4 = bits(yI3cPre, 32, 32) @[FFT3PipelineCalc.scala 103:113]
    node _yI3c_T_5 = neq(_yI3c_T_3, _yI3c_T_4) @[FFT3PipelineCalc.scala 103:102]
    node _yI3c_T_6 = and(_yI3c_T_2, _yI3c_T_5) @[FFT3PipelineCalc.scala 103:74]
    node _yI3c_T_7 = bits(yI3cPre, 32, 32) @[FFT3PipelineCalc.scala 103:149]
    node _yI3c_T_8 = bits(yI3cPre, 32, 32) @[FFT3PipelineCalc.scala 103:204]
    node _yI3c_T_9 = bits(_yI3c_T_8, 0, 0) @[Bitwise.scala 77:15]
    node _yI3c_T_10 = mux(_yI3c_T_9, UInt<15>("h7fff"), UInt<15>("h0")) @[Bitwise.scala 77:12]
    node _yI3c_T_11 = not(_yI3c_T_10) @[FFT3PipelineCalc.scala 103:173]
    node _yI3c_T_12 = cat(_yI3c_T_7, _yI3c_T_11) @[Cat.scala 33:92]
    node _yI3c_T_13 = asFixedPoint(_yI3c_T_12, 0) @[FFT3PipelineCalc.scala 103:241]
    node yI3c = mux(_yI3c_T_6, _yI3c_T_13, yI3cPre) @[FFT3PipelineCalc.scala 103:19]
    io.dataOutTR3c <= yR3c @[FFT3PipelineCalc.scala 106:20]
    io.dataOutTI3c <= yI3c @[FFT3PipelineCalc.scala 107:20]

  module FFTEngine :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip readDataSram0Bank : { im : Fixed<16><<0>>, re : Fixed<16><<0>>}[2], flip readDataSram1Bank : { im : Fixed<16><<0>>, re : Fixed<16><<0>>}[2], readEnableSram0Bank : UInt<1>[2], readEnableSram1Bank : UInt<1>[2], writeDataSram0Bank : { im : Fixed<16><<0>>, re : Fixed<16><<0>>}[2], writeDataSram1Bank : { im : Fixed<16><<0>>, re : Fixed<16><<0>>}[2], writeEnableSram0Bank : UInt<1>[2], writeEnableSram1Bank : UInt<1>[2], addrSram0Bank : UInt<2>[2], addrSram1Bank : UInt<2>[2], fftDone : UInt<1>, flip fftEngineKick : UInt<1>, flip fftMode : UInt<1>, flip fftRShiftP0 : UInt<1>[3]}

    clock is invalid
    reset is invalid
    io is invalid
    reg stateReg : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[FFTEngine.scala 46:27]
    reg addrSProc : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[FFTEngine.scala 48:29]
    reg phaseCount : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[FFTEngine.scala 50:29]
    node _T = eq(UInt<3>("h0"), stateReg) @[FFTEngine.scala 52:22]
    when _T : @[FFTEngine.scala 52:22]
      when io.fftEngineKick : @[FFTEngine.scala 54:36]
        node _stateReg_T = mux(io.fftMode, UInt<3>("h1"), UInt<3>("h4")) @[FFTEngine.scala 55:32]
        stateReg <= _stateReg_T @[FFTEngine.scala 55:26]
      else :
        stateReg <= stateReg @[FFTEngine.scala 57:26]
    else :
      node _T_1 = eq(UInt<3>("h1"), stateReg) @[FFTEngine.scala 52:22]
      when _T_1 : @[FFTEngine.scala 52:22]
        node _T_2 = eq(addrSProc, UInt<2>("h3")) @[FFTEngine.scala 61:29]
        when _T_2 : @[FFTEngine.scala 61:46]
          stateReg <= UInt<3>("h2") @[FFTEngine.scala 62:26]
        else :
          stateReg <= stateReg @[FFTEngine.scala 64:26]
      else :
        node _T_3 = eq(UInt<3>("h2"), stateReg) @[FFTEngine.scala 52:22]
        when _T_3 : @[FFTEngine.scala 52:22]
          node _T_4 = eq(addrSProc, UInt<2>("h3")) @[FFTEngine.scala 68:29]
          when _T_4 : @[FFTEngine.scala 68:45]
            stateReg <= UInt<3>("h3") @[FFTEngine.scala 69:26]
          else :
            stateReg <= stateReg @[FFTEngine.scala 71:26]
        else :
          node _T_5 = eq(UInt<3>("h3"), stateReg) @[FFTEngine.scala 52:22]
          when _T_5 : @[FFTEngine.scala 52:22]
            node _T_6 = eq(phaseCount, UInt<2>("h2")) @[FFTEngine.scala 75:29]
            when _T_6 : @[FFTEngine.scala 75:46]
              node _stateReg_T_1 = mux(io.fftMode, UInt<3>("h4"), UInt<3>("h7")) @[FFTEngine.scala 76:32]
              stateReg <= _stateReg_T_1 @[FFTEngine.scala 76:26]
            else :
              stateReg <= UInt<3>("h1") @[FFTEngine.scala 78:26]
          else :
            node _T_7 = eq(UInt<3>("h4"), stateReg) @[FFTEngine.scala 52:22]
            when _T_7 : @[FFTEngine.scala 52:22]
              node _T_8 = eq(addrSProc, UInt<2>("h3")) @[FFTEngine.scala 82:29]
              when _T_8 : @[FFTEngine.scala 82:47]
                stateReg <= UInt<3>("h5") @[FFTEngine.scala 83:26]
              else :
                stateReg <= stateReg @[FFTEngine.scala 85:26]
            else :
              node _T_9 = eq(UInt<3>("h5"), stateReg) @[FFTEngine.scala 52:22]
              when _T_9 : @[FFTEngine.scala 52:22]
                node _T_10 = eq(addrSProc, UInt<2>("h3")) @[FFTEngine.scala 89:29]
                when _T_10 : @[FFTEngine.scala 89:46]
                  stateReg <= UInt<3>("h6") @[FFTEngine.scala 90:26]
                else :
                  stateReg <= stateReg @[FFTEngine.scala 92:26]
              else :
                node _T_11 = eq(UInt<3>("h6"), stateReg) @[FFTEngine.scala 52:22]
                when _T_11 : @[FFTEngine.scala 52:22]
                  node _T_12 = eq(phaseCount, UInt<1>("h1")) @[FFTEngine.scala 96:29]
                  when _T_12 : @[FFTEngine.scala 96:47]
                    node _stateReg_T_2 = mux(io.fftMode, UInt<3>("h7"), UInt<3>("h1")) @[FFTEngine.scala 97:32]
                    stateReg <= _stateReg_T_2 @[FFTEngine.scala 97:26]
                  else :
                    stateReg <= UInt<3>("h4") @[FFTEngine.scala 99:26]
                else :
                  node _T_13 = eq(UInt<3>("h7"), stateReg) @[FFTEngine.scala 52:22]
                  when _T_13 : @[FFTEngine.scala 52:22]
                    stateReg <= UInt<3>("h0") @[FFTEngine.scala 103:22]
    node _radixInit_T = eq(stateReg, UInt<3>("h0")) @[FFTEngine.scala 107:31]
    node _radixInit_T_1 = eq(stateReg, UInt<3>("h1")) @[FFTEngine.scala 108:16]
    node _radixInit_T_2 = eq(addrSProc, UInt<2>("h3")) @[FFTEngine.scala 108:45]
    node _radixInit_T_3 = and(_radixInit_T_1, _radixInit_T_2) @[FFTEngine.scala 108:30]
    node _radixInit_T_4 = or(_radixInit_T, _radixInit_T_3) @[FFTEngine.scala 107:45]
    node _radixInit_T_5 = eq(stateReg, UInt<3>("h2")) @[FFTEngine.scala 109:16]
    node _radixInit_T_6 = eq(addrSProc, UInt<2>("h3")) @[FFTEngine.scala 109:46]
    node _radixInit_T_7 = and(_radixInit_T_5, _radixInit_T_6) @[FFTEngine.scala 109:31]
    node _radixInit_T_8 = or(_radixInit_T_4, _radixInit_T_7) @[FFTEngine.scala 108:63]
    node _radixInit_T_9 = eq(stateReg, UInt<3>("h3")) @[FFTEngine.scala 110:15]
    node _radixInit_T_10 = or(_radixInit_T_8, _radixInit_T_9) @[FFTEngine.scala 109:63]
    node _radixInit_T_11 = eq(stateReg, UInt<3>("h4")) @[FFTEngine.scala 111:16]
    node _radixInit_T_12 = eq(addrSProc, UInt<2>("h3")) @[FFTEngine.scala 111:43]
    node _radixInit_T_13 = and(_radixInit_T_11, _radixInit_T_12) @[FFTEngine.scala 111:28]
    node _radixInit_T_14 = or(_radixInit_T_10, _radixInit_T_13) @[FFTEngine.scala 110:32]
    node _radixInit_T_15 = eq(stateReg, UInt<3>("h5")) @[FFTEngine.scala 112:16]
    node _radixInit_T_16 = eq(addrSProc, UInt<2>("h3")) @[FFTEngine.scala 112:44]
    node _radixInit_T_17 = and(_radixInit_T_15, _radixInit_T_16) @[FFTEngine.scala 112:29]
    node _radixInit_T_18 = or(_radixInit_T_14, _radixInit_T_17) @[FFTEngine.scala 111:62]
    node _radixInit_T_19 = eq(stateReg, UInt<3>("h6")) @[FFTEngine.scala 113:15]
    node _radixInit_T_20 = or(_radixInit_T_18, _radixInit_T_19) @[FFTEngine.scala 112:62]
    node _radixInit_T_21 = eq(stateReg, UInt<3>("h7")) @[FFTEngine.scala 114:15]
    node radixInit = or(_radixInit_T_20, _radixInit_T_21) @[FFTEngine.scala 113:30]
    node _radixUp_T = eq(stateReg, UInt<3>("h1")) @[FFTEngine.scala 116:29]
    node _radixUp_T_1 = eq(stateReg, UInt<3>("h2")) @[FFTEngine.scala 116:55]
    node _radixUp_T_2 = or(_radixUp_T, _radixUp_T_1) @[FFTEngine.scala 116:43]
    node _radixUp_T_3 = eq(stateReg, UInt<3>("h4")) @[FFTEngine.scala 117:15]
    node _radixUp_T_4 = or(_radixUp_T_2, _radixUp_T_3) @[FFTEngine.scala 116:70]
    node _radixUp_T_5 = eq(stateReg, UInt<3>("h5")) @[FFTEngine.scala 117:39]
    node radixUp = or(_radixUp_T_4, _radixUp_T_5) @[FFTEngine.scala 117:27]
    when radixInit : @[FFTEngine.scala 120:21]
      addrSProc <= UInt<1>("h0") @[FFTEngine.scala 121:20]
    else :
      when radixUp : @[FFTEngine.scala 122:26]
        node _radixCount_T = add(addrSProc, UInt<1>("h1")) @[FFTEngine.scala 123:34]
        node _radixCount_T_1 = tail(_radixCount_T, 1) @[FFTEngine.scala 123:34]
        addrSProc <= _radixCount_T_1 @[FFTEngine.scala 123:20]
      else :
        addrSProc <= addrSProc @[FFTEngine.scala 125:20]
    node _phaseInit_T = eq(stateReg, UInt<3>("h0")) @[FFTEngine.scala 128:31]
    node _phaseInit_T_1 = eq(stateReg, UInt<3>("h3")) @[FFTEngine.scala 129:16]
    node _phaseInit_T_2 = eq(phaseCount, UInt<2>("h2")) @[FFTEngine.scala 129:47]
    node _phaseInit_T_3 = and(_phaseInit_T_1, _phaseInit_T_2) @[FFTEngine.scala 129:33]
    node _phaseInit_T_4 = or(_phaseInit_T, _phaseInit_T_3) @[FFTEngine.scala 128:45]
    node _phaseInit_T_5 = eq(stateReg, UInt<3>("h6")) @[FFTEngine.scala 130:16]
    node _phaseInit_T_6 = eq(phaseCount, UInt<1>("h1")) @[FFTEngine.scala 130:45]
    node _phaseInit_T_7 = and(_phaseInit_T_5, _phaseInit_T_6) @[FFTEngine.scala 130:31]
    node _phaseInit_T_8 = or(_phaseInit_T_4, _phaseInit_T_7) @[FFTEngine.scala 129:65]
    node _phaseInit_T_9 = eq(stateReg, UInt<3>("h7")) @[FFTEngine.scala 131:15]
    node phaseInit = or(_phaseInit_T_8, _phaseInit_T_9) @[FFTEngine.scala 130:64]
    node _phaseUp_T = eq(stateReg, UInt<3>("h3")) @[FFTEngine.scala 133:29]
    node _phaseUp_T_1 = eq(stateReg, UInt<3>("h6")) @[FFTEngine.scala 133:58]
    node phaseUp = or(_phaseUp_T, _phaseUp_T_1) @[FFTEngine.scala 133:46]
    when phaseInit : @[FFTEngine.scala 135:21]
      phaseCount <= UInt<1>("h0") @[FFTEngine.scala 136:20]
    else :
      when phaseUp : @[FFTEngine.scala 137:26]
        node _phaseCount_T = add(phaseCount, UInt<1>("h1")) @[FFTEngine.scala 138:34]
        node _phaseCount_T_1 = tail(_phaseCount_T, 1) @[FFTEngine.scala 138:34]
        phaseCount <= _phaseCount_T_1 @[FFTEngine.scala 138:20]
      else :
        phaseCount <= phaseCount @[FFTEngine.scala 140:20]
    reg srcBuffer : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[FFTEngine.scala 143:28]
    node _srcBufferNext_T = eq(stateReg, UInt<3>("h3")) @[FFTEngine.scala 145:35]
    node _srcBufferNext_T_1 = eq(stateReg, UInt<3>("h6")) @[FFTEngine.scala 145:62]
    node _srcBufferNext_T_2 = or(_srcBufferNext_T, _srcBufferNext_T_1) @[FFTEngine.scala 145:51]
    node _srcBufferNext_T_3 = eq(srcBuffer, UInt<1>("h0")) @[FFTEngine.scala 145:79]
    node srcBufferNext = and(_srcBufferNext_T_2, _srcBufferNext_T_3) @[FFTEngine.scala 145:77]
    node _srcUp_T = eq(stateReg, UInt<3>("h0")) @[FFTEngine.scala 147:27]
    node _srcUp_T_1 = eq(stateReg, UInt<3>("h3")) @[FFTEngine.scala 147:53]
    node _srcUp_T_2 = or(_srcUp_T, _srcUp_T_1) @[FFTEngine.scala 147:41]
    node _srcUp_T_3 = eq(stateReg, UInt<3>("h6")) @[FFTEngine.scala 147:82]
    node srcUp = or(_srcUp_T_2, _srcUp_T_3) @[FFTEngine.scala 147:70]
    when srcUp : @[FFTEngine.scala 149:17]
      srcBuffer <= srcBufferNext @[FFTEngine.scala 150:19]
    else :
      srcBuffer <= srcBuffer @[FFTEngine.scala 152:19]
    node kernelState = eq(stateReg, UInt<3>("h1")) @[FFTEngine.scala 155:33]
    node procState = eq(stateReg, UInt<3>("h4")) @[FFTEngine.scala 156:31]
    node readEnable = or(kernelState, procState) @[FFTEngine.scala 158:34]
    node radixCountTemp = bits(addrSProc, 1, 0) @[FFTEngine.scala 160:36]
    wire nk : UInt[1] @[FFTEngine.scala 168:18]
    node _T_14 = bits(addrSProc, 1, 0) @[FFTEngine.scala 171:74]
    wire _WIRE : UInt<1>[2] @[FFTEngine.scala 171:142]
    _WIRE[0] <= UInt<1>("h1") @[FFTEngine.scala 171:142]
    _WIRE[1] <= UInt<1>("h1") @[FFTEngine.scala 171:142]
    node _T_15 = cat(_WIRE[1], _WIRE[0]) @[FFTEngine.scala 171:173]
    node _T_16 = cat(UInt<1>("h0"), _T_15) @[Cat.scala 33:92]
    node _T_17 = dshr(_T_16, phaseCount) @[FFTEngine.scala 171:181]
    node _T_18 = not(_T_17) @[FFTEngine.scala 171:119]
    node _T_19 = and(_T_14, _T_18) @[FFTEngine.scala 171:117]
    nk[0] <= _T_19 @[FFTEngine.scala 171:12]
    wire addrSKernelPre : UInt[1] @[FFTEngine.scala 213:30]
    wire addrTKernelPre : UInt[1] @[FFTEngine.scala 214:30]
    node _T_20 = cat(radixCountTemp, UInt<1>("h0")) @[Cat.scala 33:92]
    node _dataTemp_T = cat(_T_20, _T_20) @[Cat.scala 33:92]
    node dataTemp = dshl(_dataTemp_T, phaseCount) @[FFTEngine.scala 204:40]
    node _T_21 = bits(dataTemp, 5, 3) @[FFTEngine.scala 205:17]
    addrSKernelPre[0] <= _T_21 @[FFTEngine.scala 217:24]
    node _T_22 = cat(radixCountTemp, UInt<1>("h1")) @[Cat.scala 33:92]
    node _dataTemp_T_1 = cat(_T_22, _T_22) @[Cat.scala 33:92]
    node dataTemp_1 = dshl(_dataTemp_T_1, phaseCount) @[FFTEngine.scala 204:40]
    node _T_23 = bits(dataTemp_1, 5, 3) @[FFTEngine.scala 205:17]
    addrTKernelPre[0] <= _T_23 @[FFTEngine.scala 218:24]
    node _addrTProc_T = not(addrSProc) @[FFTEngine.scala 251:22]
    node _addrTProc_T_1 = add(_addrTProc_T, UInt<1>("h1")) @[FFTEngine.scala 251:34]
    node _addrTProc_T_2 = tail(_addrTProc_T_1, 1) @[FFTEngine.scala 251:34]
    node addrTProc = bits(_addrTProc_T_2, 2, 0) @[FFTEngine.scala 251:40]
    wire addrS : UInt<3>[1] @[FFTEngine.scala 253:21]
    wire addrT : UInt<3>[1] @[FFTEngine.scala 254:21]
    node _addrS_0_temp_T = bits(addrSProc, 2, 2) @[FFTEngine.scala 164:34]
    node _addrS_0_temp_T_1 = bits(addrSProc, 0, 0) @[FFTEngine.scala 164:55]
    node addrS_0_temp_0 = mux(io.fftMode, _addrS_0_temp_T, _addrS_0_temp_T_1) @[FFTEngine.scala 164:26]
    node _addrS_0_temp_T_2 = bits(addrSProc, 1, 1) @[FFTEngine.scala 164:34]
    node _addrS_0_temp_T_3 = bits(addrSProc, 1, 1) @[FFTEngine.scala 164:55]
    node addrS_0_temp_1 = mux(io.fftMode, _addrS_0_temp_T_2, _addrS_0_temp_T_3) @[FFTEngine.scala 164:26]
    node _addrS_0_temp_T_4 = bits(addrSProc, 0, 0) @[FFTEngine.scala 164:34]
    node _addrS_0_temp_T_5 = bits(addrSProc, 2, 2) @[FFTEngine.scala 164:55]
    node addrS_0_temp_2 = mux(io.fftMode, _addrS_0_temp_T_4, _addrS_0_temp_T_5) @[FFTEngine.scala 164:26]
    wire _addrS_0_WIRE : UInt<1>[3] @[FFTEngine.scala 165:16]
    _addrS_0_WIRE[0] <= addrS_0_temp_0 @[FFTEngine.scala 165:16]
    _addrS_0_WIRE[1] <= addrS_0_temp_1 @[FFTEngine.scala 165:16]
    _addrS_0_WIRE[2] <= addrS_0_temp_2 @[FFTEngine.scala 165:16]
    node addrS_0_hi = cat(_addrS_0_WIRE[2], _addrS_0_WIRE[1]) @[FFTEngine.scala 165:23]
    node _addrS_0_T = cat(addrS_0_hi, _addrS_0_WIRE[0]) @[FFTEngine.scala 165:23]
    node _addrS_0_temp_T_6 = bits(addrSKernelPre[0], 2, 2) @[FFTEngine.scala 164:34]
    node _addrS_0_temp_T_7 = bits(addrSKernelPre[0], 0, 0) @[FFTEngine.scala 164:55]
    node addrS_0_temp_0_1 = mux(UInt<1>("h1"), _addrS_0_temp_T_6, _addrS_0_temp_T_7) @[FFTEngine.scala 164:26]
    node _addrS_0_temp_T_8 = bits(addrSKernelPre[0], 1, 1) @[FFTEngine.scala 164:34]
    node _addrS_0_temp_T_9 = bits(addrSKernelPre[0], 1, 1) @[FFTEngine.scala 164:55]
    node addrS_0_temp_1_1 = mux(UInt<1>("h1"), _addrS_0_temp_T_8, _addrS_0_temp_T_9) @[FFTEngine.scala 164:26]
    node _addrS_0_temp_T_10 = bits(addrSKernelPre[0], 0, 0) @[FFTEngine.scala 164:34]
    node _addrS_0_temp_T_11 = bits(addrSKernelPre[0], 2, 2) @[FFTEngine.scala 164:55]
    node addrS_0_temp_2_1 = mux(UInt<1>("h1"), _addrS_0_temp_T_10, _addrS_0_temp_T_11) @[FFTEngine.scala 164:26]
    wire _addrS_0_WIRE_1 : UInt<1>[3] @[FFTEngine.scala 165:16]
    _addrS_0_WIRE_1[0] <= addrS_0_temp_0_1 @[FFTEngine.scala 165:16]
    _addrS_0_WIRE_1[1] <= addrS_0_temp_1_1 @[FFTEngine.scala 165:16]
    _addrS_0_WIRE_1[2] <= addrS_0_temp_2_1 @[FFTEngine.scala 165:16]
    node addrS_0_hi_1 = cat(_addrS_0_WIRE_1[2], _addrS_0_WIRE_1[1]) @[FFTEngine.scala 165:23]
    node _addrS_0_T_1 = cat(addrS_0_hi_1, _addrS_0_WIRE_1[0]) @[FFTEngine.scala 165:23]
    node _addrS_0_T_2 = mux(procState, _addrS_0_T, _addrS_0_T_1) @[FFTEngine.scala 257:28]
    addrS[0] <= _addrS_0_T_2 @[FFTEngine.scala 257:22]
    node _addrT_0_temp_T = bits(addrTProc, 2, 2) @[FFTEngine.scala 164:34]
    node _addrT_0_temp_T_1 = bits(addrTProc, 0, 0) @[FFTEngine.scala 164:55]
    node addrT_0_temp_0 = mux(io.fftMode, _addrT_0_temp_T, _addrT_0_temp_T_1) @[FFTEngine.scala 164:26]
    node _addrT_0_temp_T_2 = bits(addrTProc, 1, 1) @[FFTEngine.scala 164:34]
    node _addrT_0_temp_T_3 = bits(addrTProc, 1, 1) @[FFTEngine.scala 164:55]
    node addrT_0_temp_1 = mux(io.fftMode, _addrT_0_temp_T_2, _addrT_0_temp_T_3) @[FFTEngine.scala 164:26]
    node _addrT_0_temp_T_4 = bits(addrTProc, 0, 0) @[FFTEngine.scala 164:34]
    node _addrT_0_temp_T_5 = bits(addrTProc, 2, 2) @[FFTEngine.scala 164:55]
    node addrT_0_temp_2 = mux(io.fftMode, _addrT_0_temp_T_4, _addrT_0_temp_T_5) @[FFTEngine.scala 164:26]
    wire _addrT_0_WIRE : UInt<1>[3] @[FFTEngine.scala 165:16]
    _addrT_0_WIRE[0] <= addrT_0_temp_0 @[FFTEngine.scala 165:16]
    _addrT_0_WIRE[1] <= addrT_0_temp_1 @[FFTEngine.scala 165:16]
    _addrT_0_WIRE[2] <= addrT_0_temp_2 @[FFTEngine.scala 165:16]
    node addrT_0_hi = cat(_addrT_0_WIRE[2], _addrT_0_WIRE[1]) @[FFTEngine.scala 165:23]
    node _addrT_0_T = cat(addrT_0_hi, _addrT_0_WIRE[0]) @[FFTEngine.scala 165:23]
    node _addrT_0_temp_T_6 = bits(addrTKernelPre[0], 2, 2) @[FFTEngine.scala 164:34]
    node _addrT_0_temp_T_7 = bits(addrTKernelPre[0], 0, 0) @[FFTEngine.scala 164:55]
    node addrT_0_temp_0_1 = mux(UInt<1>("h1"), _addrT_0_temp_T_6, _addrT_0_temp_T_7) @[FFTEngine.scala 164:26]
    node _addrT_0_temp_T_8 = bits(addrTKernelPre[0], 1, 1) @[FFTEngine.scala 164:34]
    node _addrT_0_temp_T_9 = bits(addrTKernelPre[0], 1, 1) @[FFTEngine.scala 164:55]
    node addrT_0_temp_1_1 = mux(UInt<1>("h1"), _addrT_0_temp_T_8, _addrT_0_temp_T_9) @[FFTEngine.scala 164:26]
    node _addrT_0_temp_T_10 = bits(addrTKernelPre[0], 0, 0) @[FFTEngine.scala 164:34]
    node _addrT_0_temp_T_11 = bits(addrTKernelPre[0], 2, 2) @[FFTEngine.scala 164:55]
    node addrT_0_temp_2_1 = mux(UInt<1>("h1"), _addrT_0_temp_T_10, _addrT_0_temp_T_11) @[FFTEngine.scala 164:26]
    wire _addrT_0_WIRE_1 : UInt<1>[3] @[FFTEngine.scala 165:16]
    _addrT_0_WIRE_1[0] <= addrT_0_temp_0_1 @[FFTEngine.scala 165:16]
    _addrT_0_WIRE_1[1] <= addrT_0_temp_1_1 @[FFTEngine.scala 165:16]
    _addrT_0_WIRE_1[2] <= addrT_0_temp_2_1 @[FFTEngine.scala 165:16]
    node addrT_0_hi_1 = cat(_addrT_0_WIRE_1[2], _addrT_0_WIRE_1[1]) @[FFTEngine.scala 165:23]
    node _addrT_0_T_1 = cat(addrT_0_hi_1, _addrT_0_WIRE_1[0]) @[FFTEngine.scala 165:23]
    node _addrT_0_T_2 = mux(procState, _addrT_0_T, _addrT_0_T_1) @[FFTEngine.scala 258:28]
    addrT[0] <= _addrT_0_T_2 @[FFTEngine.scala 258:22]
    node sameAddr = eq(addrS[0], addrT[0]) @[FFTEngine.scala 265:29]
    node _addrSBankSelKernelPrePre_sum_T = dshr(addrS[0], UInt<1>("h0")) @[FFTEngine.scala 268:115]
    node _addrSBankSelKernelPrePre_sum_T_1 = bits(_addrSBankSelKernelPrePre_sum_T, 0, 0) @[FFTEngine.scala 268:115]
    node _addrSBankSelKernelPrePre_sum_T_2 = add(UInt<1>("h0"), _addrSBankSelKernelPrePre_sum_T_1) @[FFTEngine.scala 268:107]
    node _addrSBankSelKernelPrePre_sum_T_3 = tail(_addrSBankSelKernelPrePre_sum_T_2, 1) @[FFTEngine.scala 268:107]
    node _addrSBankSelKernelPrePre_sum_T_4 = dshr(addrS[0], UInt<1>("h1")) @[FFTEngine.scala 268:115]
    node _addrSBankSelKernelPrePre_sum_T_5 = bits(_addrSBankSelKernelPrePre_sum_T_4, 0, 0) @[FFTEngine.scala 268:115]
    node _addrSBankSelKernelPrePre_sum_T_6 = add(_addrSBankSelKernelPrePre_sum_T_3, _addrSBankSelKernelPrePre_sum_T_5) @[FFTEngine.scala 268:107]
    node _addrSBankSelKernelPrePre_sum_T_7 = tail(_addrSBankSelKernelPrePre_sum_T_6, 1) @[FFTEngine.scala 268:107]
    node _addrSBankSelKernelPrePre_sum_T_8 = dshr(addrS[0], UInt<2>("h2")) @[FFTEngine.scala 268:115]
    node _addrSBankSelKernelPrePre_sum_T_9 = bits(_addrSBankSelKernelPrePre_sum_T_8, 0, 0) @[FFTEngine.scala 268:115]
    node _addrSBankSelKernelPrePre_sum_T_10 = add(_addrSBankSelKernelPrePre_sum_T_7, _addrSBankSelKernelPrePre_sum_T_9) @[FFTEngine.scala 268:107]
    node addrSBankSelKernelPrePre_0_0 = tail(_addrSBankSelKernelPrePre_sum_T_10, 1) @[FFTEngine.scala 268:107]
    node _addrSBankSelKernelPre_T = shl(UInt<1>("h0"), 1) @[FFTEngine.scala 274:138]
    node _addrSBankSelKernelPre_T_1 = add(_addrSBankSelKernelPre_T, addrSBankSelKernelPrePre_0_0) @[FFTEngine.scala 274:144]
    node _addrSBankSelKernelPre_T_2 = tail(_addrSBankSelKernelPre_T_1, 1) @[FFTEngine.scala 274:144]
    node addrSBankSelKernelPre_0 = bits(_addrSBankSelKernelPre_T_2, 0, 0) @[FFTEngine.scala 274:160]
    wire addrSBankSelKernel : UInt<1>[1] @[FFTEngine.scala 276:34]
    node _addrTBankSelKernelPrePre_sum_T = dshr(addrT[0], UInt<1>("h0")) @[FFTEngine.scala 268:115]
    node _addrTBankSelKernelPrePre_sum_T_1 = bits(_addrTBankSelKernelPrePre_sum_T, 0, 0) @[FFTEngine.scala 268:115]
    node _addrTBankSelKernelPrePre_sum_T_2 = add(UInt<1>("h0"), _addrTBankSelKernelPrePre_sum_T_1) @[FFTEngine.scala 268:107]
    node _addrTBankSelKernelPrePre_sum_T_3 = tail(_addrTBankSelKernelPrePre_sum_T_2, 1) @[FFTEngine.scala 268:107]
    node _addrTBankSelKernelPrePre_sum_T_4 = dshr(addrT[0], UInt<1>("h1")) @[FFTEngine.scala 268:115]
    node _addrTBankSelKernelPrePre_sum_T_5 = bits(_addrTBankSelKernelPrePre_sum_T_4, 0, 0) @[FFTEngine.scala 268:115]
    node _addrTBankSelKernelPrePre_sum_T_6 = add(_addrTBankSelKernelPrePre_sum_T_3, _addrTBankSelKernelPrePre_sum_T_5) @[FFTEngine.scala 268:107]
    node _addrTBankSelKernelPrePre_sum_T_7 = tail(_addrTBankSelKernelPrePre_sum_T_6, 1) @[FFTEngine.scala 268:107]
    node _addrTBankSelKernelPrePre_sum_T_8 = dshr(addrT[0], UInt<2>("h2")) @[FFTEngine.scala 268:115]
    node _addrTBankSelKernelPrePre_sum_T_9 = bits(_addrTBankSelKernelPrePre_sum_T_8, 0, 0) @[FFTEngine.scala 268:115]
    node _addrTBankSelKernelPrePre_sum_T_10 = add(_addrTBankSelKernelPrePre_sum_T_7, _addrTBankSelKernelPrePre_sum_T_9) @[FFTEngine.scala 268:107]
    node addrTBankSelKernelPrePre_0_0 = tail(_addrTBankSelKernelPrePre_sum_T_10, 1) @[FFTEngine.scala 268:107]
    node _addrTBankSelKernelPre_T = shl(UInt<1>("h0"), 1) @[FFTEngine.scala 280:138]
    node _addrTBankSelKernelPre_T_1 = add(_addrTBankSelKernelPre_T, addrTBankSelKernelPrePre_0_0) @[FFTEngine.scala 280:144]
    node _addrTBankSelKernelPre_T_2 = tail(_addrTBankSelKernelPre_T_1, 1) @[FFTEngine.scala 280:144]
    node addrTBankSelKernelPre_0 = bits(_addrTBankSelKernelPre_T_2, 0, 0) @[FFTEngine.scala 280:160]
    wire addrTBankSelKernel : UInt<1>[1] @[FFTEngine.scala 282:34]
    when kernelState : @[FFTEngine.scala 285:27]
      addrSBankSelKernel[0] <= addrSBankSelKernelPre_0 @[FFTEngine.scala 286:35]
      addrTBankSelKernel[0] <= addrTBankSelKernelPre_0 @[FFTEngine.scala 287:35]
    else :
      addrSBankSelKernel[0] <= UInt<1>("h0") @[FFTEngine.scala 289:35]
      addrTBankSelKernel[0] <= UInt<1>("h1") @[FFTEngine.scala 290:35]
    wire addrSBankSelProc : UInt[1] @[FFTEngine.scala 294:32]
    wire addrTBankSelProc : UInt[1] @[FFTEngine.scala 295:32]
    wire addrSBankSelProcPre : UInt<1>[1] @[FFTEngine.scala 297:39]
    wire addrTBankSelProcPre : UInt<1>[1] @[FFTEngine.scala 298:39]
    node _addrSBankSelProcPre_0_T = bits(addrS[0], 0, 0) @[FFTEngine.scala 300:47]
    node _addrSBankSelProcPre_0_T_1 = bits(addrS[0], 2, 2) @[FFTEngine.scala 300:61]
    node _addrSBankSelProcPre_0_T_2 = xor(_addrSBankSelProcPre_0_T, _addrSBankSelProcPre_0_T_1) @[FFTEngine.scala 300:51]
    addrSBankSelProcPre[0] <= _addrSBankSelProcPre_0_T_2 @[FFTEngine.scala 300:36]
    node _addrTBankSelProcPre_0_T = bits(addrT[0], 0, 0) @[FFTEngine.scala 301:47]
    node _addrTBankSelProcPre_0_T_1 = bits(addrT[0], 2, 2) @[FFTEngine.scala 301:61]
    node _addrTBankSelProcPre_0_T_2 = xor(_addrTBankSelProcPre_0_T, _addrTBankSelProcPre_0_T_1) @[FFTEngine.scala 301:51]
    addrTBankSelProcPre[0] <= _addrTBankSelProcPre_0_T_2 @[FFTEngine.scala 301:36]
    addrSBankSelProc[0] <= addrSBankSelProcPre[0] @[FFTEngine.scala 303:29]
    addrTBankSelProc[0] <= addrTBankSelProcPre[0] @[FFTEngine.scala 304:29]
    wire addrSBankSelKernel1c : UInt[1] @[FFTEngine.scala 307:36]
    wire addrSBankSelKernel2c : UInt[1] @[FFTEngine.scala 308:36]
    wire addrSBankSelKernel3c : UInt[1] @[FFTEngine.scala 309:36]
    wire addrTBankSelKernel1c : UInt[1] @[FFTEngine.scala 310:36]
    wire addrTBankSelKernel2c : UInt[1] @[FFTEngine.scala 311:36]
    wire addrTBankSelKernel3c : UInt[1] @[FFTEngine.scala 312:36]
    reg addrSBankSelKernel1c_0_r : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when UInt<1>("h1") : @[Reg.scala 36:18]
      addrSBankSelKernel1c_0_r <= addrSBankSelKernel[0] @[Reg.scala 36:22]
    addrSBankSelKernel1c[0] <= addrSBankSelKernel1c_0_r @[FFTEngine.scala 315:33]
    reg addrSBankSelKernel2c_0_r : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when UInt<1>("h1") : @[Reg.scala 36:18]
      addrSBankSelKernel2c_0_r <= addrSBankSelKernel1c[0] @[Reg.scala 36:22]
    addrSBankSelKernel2c[0] <= addrSBankSelKernel2c_0_r @[FFTEngine.scala 316:33]
    reg addrSBankSelKernel3c_0_r : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when UInt<1>("h1") : @[Reg.scala 36:18]
      addrSBankSelKernel3c_0_r <= addrSBankSelKernel2c[0] @[Reg.scala 36:22]
    addrSBankSelKernel3c[0] <= addrSBankSelKernel3c_0_r @[FFTEngine.scala 317:33]
    reg addrTBankSelKernel1c_0_r : UInt, clock with :
      reset => (reset, UInt<1>("h1")) @[Reg.scala 35:20]
    when UInt<1>("h1") : @[Reg.scala 36:18]
      addrTBankSelKernel1c_0_r <= addrTBankSelKernel[0] @[Reg.scala 36:22]
    addrTBankSelKernel1c[0] <= addrTBankSelKernel1c_0_r @[FFTEngine.scala 318:33]
    reg addrTBankSelKernel2c_0_r : UInt, clock with :
      reset => (reset, UInt<1>("h1")) @[Reg.scala 35:20]
    when UInt<1>("h1") : @[Reg.scala 36:18]
      addrTBankSelKernel2c_0_r <= addrTBankSelKernel1c[0] @[Reg.scala 36:22]
    addrTBankSelKernel2c[0] <= addrTBankSelKernel2c_0_r @[FFTEngine.scala 319:33]
    reg addrTBankSelKernel3c_0_r : UInt, clock with :
      reset => (reset, UInt<1>("h1")) @[Reg.scala 35:20]
    when UInt<1>("h1") : @[Reg.scala 36:18]
      addrTBankSelKernel3c_0_r <= addrTBankSelKernel2c[0] @[Reg.scala 36:22]
    addrTBankSelKernel3c[0] <= addrTBankSelKernel3c_0_r @[FFTEngine.scala 320:33]
    wire addrSBankSelProc1c : UInt[1] @[FFTEngine.scala 323:34]
    wire addrSBankSelProc2c : UInt[1] @[FFTEngine.scala 324:34]
    wire addrSBankSelProc3c : UInt[1] @[FFTEngine.scala 325:34]
    wire addrTBankSelProc1c : UInt[1] @[FFTEngine.scala 326:34]
    wire addrTBankSelProc2c : UInt[1] @[FFTEngine.scala 327:34]
    wire addrTBankSelProc3c : UInt[1] @[FFTEngine.scala 328:34]
    reg addrSBankSelProc1c_0_r : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when UInt<1>("h1") : @[Reg.scala 36:18]
      addrSBankSelProc1c_0_r <= addrSBankSelProc[0] @[Reg.scala 36:22]
    addrSBankSelProc1c[0] <= addrSBankSelProc1c_0_r @[FFTEngine.scala 331:31]
    reg addrSBankSelProc2c_0_r : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when UInt<1>("h1") : @[Reg.scala 36:18]
      addrSBankSelProc2c_0_r <= addrSBankSelProc1c[0] @[Reg.scala 36:22]
    addrSBankSelProc2c[0] <= addrSBankSelProc2c_0_r @[FFTEngine.scala 332:31]
    reg addrSBankSelProc3c_0_r : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when UInt<1>("h1") : @[Reg.scala 36:18]
      addrSBankSelProc3c_0_r <= addrSBankSelProc2c[0] @[Reg.scala 36:22]
    addrSBankSelProc3c[0] <= addrSBankSelProc3c_0_r @[FFTEngine.scala 333:31]
    reg addrTBankSelProc1c_0_r : UInt, clock with :
      reset => (reset, UInt<1>("h1")) @[Reg.scala 35:20]
    when UInt<1>("h1") : @[Reg.scala 36:18]
      addrTBankSelProc1c_0_r <= addrTBankSelProc[0] @[Reg.scala 36:22]
    addrTBankSelProc1c[0] <= addrTBankSelProc1c_0_r @[FFTEngine.scala 334:31]
    reg addrTBankSelProc2c_0_r : UInt, clock with :
      reset => (reset, UInt<1>("h1")) @[Reg.scala 35:20]
    when UInt<1>("h1") : @[Reg.scala 36:18]
      addrTBankSelProc2c_0_r <= addrTBankSelProc1c[0] @[Reg.scala 36:22]
    addrTBankSelProc2c[0] <= addrTBankSelProc2c_0_r @[FFTEngine.scala 335:31]
    reg addrTBankSelProc3c_0_r : UInt, clock with :
      reset => (reset, UInt<1>("h1")) @[Reg.scala 35:20]
    when UInt<1>("h1") : @[Reg.scala 36:18]
      addrTBankSelProc3c_0_r <= addrTBankSelProc2c[0] @[Reg.scala 36:22]
    addrTBankSelProc3c[0] <= addrTBankSelProc3c_0_r @[FFTEngine.scala 336:31]
    reg kernelState1c : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when UInt<1>("h1") : @[Reg.scala 36:18]
      kernelState1c <= kernelState @[Reg.scala 36:22]
    reg kernelState2c : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when UInt<1>("h1") : @[Reg.scala 36:18]
      kernelState2c <= kernelState1c @[Reg.scala 36:22]
    reg kernelState3c : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when UInt<1>("h1") : @[Reg.scala 36:18]
      kernelState3c <= kernelState2c @[Reg.scala 36:22]
    reg procState1c : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when UInt<1>("h1") : @[Reg.scala 36:18]
      procState1c <= procState @[Reg.scala 36:22]
    reg procState2c : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when UInt<1>("h1") : @[Reg.scala 36:18]
      procState2c <= procState1c @[Reg.scala 36:22]
    reg procState3c : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when UInt<1>("h1") : @[Reg.scala 36:18]
      procState3c <= procState2c @[Reg.scala 36:22]
    reg sameAddr1c : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when UInt<1>("h1") : @[Reg.scala 36:18]
      sameAddr1c <= sameAddr @[Reg.scala 36:22]
    reg sameAddr2c : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when UInt<1>("h1") : @[Reg.scala 36:18]
      sameAddr2c <= sameAddr1c @[Reg.scala 36:22]
    reg sameAddr3c : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when UInt<1>("h1") : @[Reg.scala 36:18]
      sameAddr3c <= sameAddr2c @[Reg.scala 36:22]
    node _io_readEnableSram0Bank_0_T = eq(srcBuffer, UInt<1>("h0")) @[FFTEngine.scala 352:51]
    node _io_readEnableSram0Bank_0_T_1 = and(readEnable, _io_readEnableSram0Bank_0_T) @[FFTEngine.scala 352:49]
    io.readEnableSram0Bank[0] <= _io_readEnableSram0Bank_0_T_1 @[FFTEngine.scala 352:35]
    node _io_readEnableSram1Bank_0_T = and(readEnable, srcBuffer) @[FFTEngine.scala 353:49]
    io.readEnableSram1Bank[0] <= _io_readEnableSram1Bank_0_T @[FFTEngine.scala 353:35]
    node _io_readEnableSram0Bank_1_T = eq(srcBuffer, UInt<1>("h0")) @[FFTEngine.scala 352:51]
    node _io_readEnableSram0Bank_1_T_1 = and(readEnable, _io_readEnableSram0Bank_1_T) @[FFTEngine.scala 352:49]
    io.readEnableSram0Bank[1] <= _io_readEnableSram0Bank_1_T_1 @[FFTEngine.scala 352:35]
    node _io_readEnableSram1Bank_1_T = and(readEnable, srcBuffer) @[FFTEngine.scala 353:49]
    io.readEnableSram1Bank[1] <= _io_readEnableSram1Bank_1_T @[FFTEngine.scala 353:35]
    wire dataInPre : { im : Fixed<16><<0>>, re : Fixed<16><<0>>}[2] @[FFTEngine.scala 356:25]
    node _dataInPre_0_T = mux(srcBuffer, io.readDataSram1Bank[0], io.readDataSram0Bank[0]) @[FFTEngine.scala 359:28]
    dataInPre[0] <= _dataInPre_0_T @[FFTEngine.scala 359:22]
    node _dataInPre_1_T = mux(srcBuffer, io.readDataSram1Bank[1], io.readDataSram0Bank[1]) @[FFTEngine.scala 359:28]
    dataInPre[1] <= _dataInPre_1_T @[FFTEngine.scala 359:22]
    node _addrS1c_T = bits(addrS[0], 1, 0) @[FFTEngine.scala 363:45]
    reg addrS1c : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when UInt<1>("h1") : @[Reg.scala 36:18]
      addrS1c <= _addrS1c_T @[Reg.scala 36:22]
    reg addrS2c : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when UInt<1>("h1") : @[Reg.scala 36:18]
      addrS2c <= addrS1c @[Reg.scala 36:22]
    reg addrS3c : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when UInt<1>("h1") : @[Reg.scala 36:18]
      addrS3c <= addrS2c @[Reg.scala 36:22]
    node _addrT1c_T = bits(addrT[0], 1, 0) @[FFTEngine.scala 367:45]
    reg addrT1c : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when UInt<1>("h1") : @[Reg.scala 36:18]
      addrT1c <= _addrT1c_T @[Reg.scala 36:22]
    reg addrT2c : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when UInt<1>("h1") : @[Reg.scala 36:18]
      addrT2c <= addrT1c @[Reg.scala 36:22]
    reg addrT3c : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when UInt<1>("h1") : @[Reg.scala 36:18]
      addrT3c <= addrT2c @[Reg.scala 36:22]
    wire addrSBankSel : UInt @[FFTEngine.scala 371:32]
    wire addrTBankSel : UInt @[FFTEngine.scala 372:32]
    node _addrSBankSel_T = mux(kernelState, addrSBankSelKernel[0], addrSBankSelProc[0]) @[FFTEngine.scala 375:32]
    addrSBankSel <= _addrSBankSel_T @[FFTEngine.scala 375:26]
    node _addrTBankSel_T = mux(kernelState, addrTBankSelKernel[0], addrTBankSelProc[0]) @[FFTEngine.scala 376:32]
    addrTBankSel <= _addrTBankSel_T @[FFTEngine.scala 376:26]
    when io.fftMode : @[FFTEngine.scala 382:21]
      node _addrSBankSel_T_1 = mux(procState, addrSBankSelProc[0], addrSBankSelKernel[0]) @[FFTEngine.scala 383:32]
      addrSBankSel <= _addrSBankSel_T_1 @[FFTEngine.scala 383:26]
      node _addrTBankSel_T_1 = mux(procState, addrTBankSelProc[0], addrTBankSelKernel[0]) @[FFTEngine.scala 384:32]
      addrTBankSel <= _addrTBankSel_T_1 @[FFTEngine.scala 384:26]
    else :
      node _addrSBankSel_T_2 = eq(phaseCount, UInt<1>("h0")) @[FFTEngine.scala 386:72]
      node _addrSBankSel_T_3 = and(kernelState, _addrSBankSel_T_2) @[FFTEngine.scala 386:58]
      node _addrSBankSel_T_4 = or(procState, _addrSBankSel_T_3) @[FFTEngine.scala 386:43]
      node _addrSBankSel_T_5 = mux(_addrSBankSel_T_4, addrSBankSelProc[0], addrSBankSelKernel[0]) @[FFTEngine.scala 386:32]
      addrSBankSel <= _addrSBankSel_T_5 @[FFTEngine.scala 386:26]
      node _addrTBankSel_T_2 = eq(phaseCount, UInt<1>("h0")) @[FFTEngine.scala 387:72]
      node _addrTBankSel_T_3 = and(kernelState, _addrTBankSel_T_2) @[FFTEngine.scala 387:58]
      node _addrTBankSel_T_4 = or(procState, _addrTBankSel_T_3) @[FFTEngine.scala 387:43]
      node _addrTBankSel_T_5 = mux(_addrTBankSel_T_4, addrTBankSelProc[0], addrTBankSelKernel[0]) @[FFTEngine.scala 387:32]
      addrTBankSel <= _addrTBankSel_T_5 @[FFTEngine.scala 387:26]
    reg addrSBankSel1c : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when UInt<1>("h1") : @[Reg.scala 36:18]
      addrSBankSel1c <= addrSBankSel @[Reg.scala 36:22]
    reg addrTBankSel1c : UInt, clock with :
      reset => (reset, UInt<1>("h1")) @[Reg.scala 35:20]
    when UInt<1>("h1") : @[Reg.scala 36:18]
      addrTBankSel1c <= addrTBankSel @[Reg.scala 36:22]
    inst fftCalc of FFT3PipelineCalc @[FFTEngine.scala 393:29]
    fftCalc.clock <= clock
    fftCalc.reset <= reset
    node _fftCalc_io_dataInSR_T = or(addrSBankSel1c, UInt<1>("h0"))
    node _fftCalc_io_dataInSR_T_1 = bits(_fftCalc_io_dataInSR_T, 0, 0)
    fftCalc.io.dataInSR <= dataInPre[_fftCalc_io_dataInSR_T_1].re @[FFTEngine.scala 394:29]
    node _fftCalc_io_dataInSI_T = eq(phaseCount, UInt<1>("h1")) @[FFTEngine.scala 395:61]
    node _fftCalc_io_dataInSI_T_1 = and(sameAddr1c, _fftCalc_io_dataInSI_T) @[FFTEngine.scala 395:47]
    node _fftCalc_io_dataInSI_T_2 = or(addrSBankSel1c, UInt<1>("h0"))
    node _fftCalc_io_dataInSI_T_3 = bits(_fftCalc_io_dataInSI_T_2, 0, 0)
    node _fftCalc_io_dataInSI_T_4 = mux(_fftCalc_io_dataInSI_T_1, asFixedPoint(UInt<16>("h0"), 0), dataInPre[_fftCalc_io_dataInSI_T_3].im) @[FFTEngine.scala 395:35]
    fftCalc.io.dataInSI <= _fftCalc_io_dataInSI_T_4 @[FFTEngine.scala 395:29]
    node _fftCalc_io_dataInTR_T = eq(phaseCount, UInt<1>("h1")) @[FFTEngine.scala 396:61]
    node _fftCalc_io_dataInTR_T_1 = and(sameAddr1c, _fftCalc_io_dataInTR_T) @[FFTEngine.scala 396:47]
    node _fftCalc_io_dataInTR_T_2 = or(addrTBankSel1c, UInt<1>("h0"))
    node _fftCalc_io_dataInTR_T_3 = bits(_fftCalc_io_dataInTR_T_2, 0, 0)
    node _fftCalc_io_dataInTR_T_4 = or(addrTBankSel1c, UInt<1>("h0"))
    node _fftCalc_io_dataInTR_T_5 = bits(_fftCalc_io_dataInTR_T_4, 0, 0)
    node _fftCalc_io_dataInTR_T_6 = mux(_fftCalc_io_dataInTR_T_1, dataInPre[_fftCalc_io_dataInTR_T_3].im, dataInPre[_fftCalc_io_dataInTR_T_5].re) @[FFTEngine.scala 396:35]
    fftCalc.io.dataInTR <= _fftCalc_io_dataInTR_T_6 @[FFTEngine.scala 396:29]
    node _fftCalc_io_dataInTI_T = eq(phaseCount, UInt<1>("h1")) @[FFTEngine.scala 397:61]
    node _fftCalc_io_dataInTI_T_1 = and(sameAddr1c, _fftCalc_io_dataInTI_T) @[FFTEngine.scala 397:47]
    node _fftCalc_io_dataInTI_T_2 = or(addrTBankSel1c, UInt<1>("h0"))
    node _fftCalc_io_dataInTI_T_3 = bits(_fftCalc_io_dataInTI_T_2, 0, 0)
    node _fftCalc_io_dataInTI_T_4 = mux(_fftCalc_io_dataInTI_T_1, asFixedPoint(UInt<16>("h0"), 0), dataInPre[_fftCalc_io_dataInTI_T_3].im) @[FFTEngine.scala 397:35]
    fftCalc.io.dataInTI <= _fftCalc_io_dataInTI_T_4 @[FFTEngine.scala 397:29]
    node _fftCalc_io_nk_T = bits(addrSProc, 2, 0) @[FFTEngine.scala 398:51]
    node _fftCalc_io_nk_T_1 = bits(nk[0], 1, 0) @[FFTEngine.scala 398:80]
    node _fftCalc_io_nk_T_2 = cat(_fftCalc_io_nk_T_1, UInt<1>("h0")) @[Cat.scala 33:92]
    node _fftCalc_io_nk_T_3 = mux(procState, _fftCalc_io_nk_T, _fftCalc_io_nk_T_2) @[FFTEngine.scala 398:29]
    fftCalc.io.nk <= _fftCalc_io_nk_T_3 @[FFTEngine.scala 398:23]
    node _fftCalc_io_rShiftSym_T = bits(phaseCount, 0, 0) @[FFTEngine.scala 399:90]
    node _fftCalc_io_rShiftSym_T_1 = mux(kernelState1c, io.fftRShiftP0[phaseCount], _fftCalc_io_rShiftSym_T) @[FFTEngine.scala 399:36]
    fftCalc.io.rShiftSym <= _fftCalc_io_rShiftSym_T_1 @[FFTEngine.scala 399:30]
    fftCalc.io.isFFT <= io.fftMode @[FFTEngine.scala 400:26]
    node _fftCalc_io_procMode_T = bits(phaseCount, 0, 0) @[FFTEngine.scala 401:44]
    node _fftCalc_io_procMode_T_1 = not(_fftCalc_io_procMode_T) @[FFTEngine.scala 401:33]
    node _fftCalc_io_procMode_T_2 = and(_fftCalc_io_procMode_T_1, procState2c) @[FFTEngine.scala 401:48]
    fftCalc.io.procMode <= _fftCalc_io_procMode_T_2 @[FFTEngine.scala 401:29]
    node _fftCalc_io_state1c_T = or(kernelState1c, procState1c) @[FFTEngine.scala 402:45]
    fftCalc.io.state1c <= _fftCalc_io_state1c_T @[FFTEngine.scala 402:28]
    node _fftCalc_io_state2c_T = or(kernelState2c, procState2c) @[FFTEngine.scala 403:45]
    fftCalc.io.state2c <= _fftCalc_io_state2c_T @[FFTEngine.scala 403:28]
    node _writeDataTRPre3c_T = eq(phaseCount, UInt<1>("h1")) @[FFTEngine.scala 406:64]
    node _writeDataTRPre3c_T_1 = sub(asFixedPoint(UInt<1>("h0"), 0), fftCalc.io.dataOutTI3c) @[FFTEngine.scala 406:132]
    node _writeDataTRPre3c_T_2 = tail(_writeDataTRPre3c_T_1, 1) @[FFTEngine.scala 406:132]
    node _writeDataTRPre3c_T_3 = asFixedPoint(_writeDataTRPre3c_T_2, 0) @[FFTEngine.scala 406:132]
    node _writeDataTRPre3c_T_4 = mux(io.fftMode, fftCalc.io.dataOutTI3c, _writeDataTRPre3c_T_3) @[FFTEngine.scala 406:100]
    node _writeDataTRPre3c_T_5 = mux(_writeDataTRPre3c_T, fftCalc.io.dataOutTR3c, _writeDataTRPre3c_T_4) @[FFTEngine.scala 406:52]
    node writeDataTRPre3c = mux(procState3c, _writeDataTRPre3c_T_5, fftCalc.io.dataOutTR3c) @[FFTEngine.scala 406:35]
    node _writeDataTIPre3c_T = eq(phaseCount, UInt<1>("h1")) @[FFTEngine.scala 407:64]
    node _writeDataTIPre3c_T_1 = sub(asFixedPoint(UInt<1>("h0"), 0), fftCalc.io.dataOutTI3c) @[FFTEngine.scala 407:73]
    node _writeDataTIPre3c_T_2 = tail(_writeDataTIPre3c_T_1, 1) @[FFTEngine.scala 407:73]
    node _writeDataTIPre3c_T_3 = asFixedPoint(_writeDataTIPre3c_T_2, 0) @[FFTEngine.scala 407:73]
    node _writeDataTIPre3c_T_4 = sub(asFixedPoint(UInt<1>("h0"), 0), fftCalc.io.dataOutTR3c) @[FFTEngine.scala 407:109]
    node _writeDataTIPre3c_T_5 = tail(_writeDataTIPre3c_T_4, 1) @[FFTEngine.scala 407:109]
    node _writeDataTIPre3c_T_6 = asFixedPoint(_writeDataTIPre3c_T_5, 0) @[FFTEngine.scala 407:109]
    node _writeDataTIPre3c_T_7 = mux(io.fftMode, _writeDataTIPre3c_T_6, fftCalc.io.dataOutTR3c) @[FFTEngine.scala 407:101]
    node _writeDataTIPre3c_T_8 = mux(_writeDataTIPre3c_T, _writeDataTIPre3c_T_3, _writeDataTIPre3c_T_7) @[FFTEngine.scala 407:52]
    node writeDataTIPre3c = mux(procState3c, _writeDataTIPre3c_T_8, fftCalc.io.dataOutTI3c) @[FFTEngine.scala 407:35]
    wire addrSBankSel3c : UInt @[FFTEngine.scala 409:34]
    wire addrTBankSel3c : UInt @[FFTEngine.scala 410:34]
    when io.fftMode : @[FFTEngine.scala 412:21]
      node _addrSBankSel3c_T = eq(phaseCount, UInt<2>("h2")) @[FFTEngine.scala 413:78]
      node _addrSBankSel3c_T_1 = and(kernelState3c, _addrSBankSel3c_T) @[FFTEngine.scala 413:64]
      node _addrSBankSel3c_T_2 = or(procState3c, _addrSBankSel3c_T_1) @[FFTEngine.scala 413:47]
      node _addrSBankSel3c_T_3 = mux(_addrSBankSel3c_T_2, addrSBankSelProc3c[0], addrSBankSelKernel3c[0]) @[FFTEngine.scala 413:34]
      addrSBankSel3c <= _addrSBankSel3c_T_3 @[FFTEngine.scala 413:28]
      node _addrTBankSel3c_T = eq(phaseCount, UInt<2>("h2")) @[FFTEngine.scala 414:78]
      node _addrTBankSel3c_T_1 = and(kernelState3c, _addrTBankSel3c_T) @[FFTEngine.scala 414:64]
      node _addrTBankSel3c_T_2 = or(procState3c, _addrTBankSel3c_T_1) @[FFTEngine.scala 414:47]
      node _addrTBankSel3c_T_3 = mux(_addrTBankSel3c_T_2, addrTBankSelProc3c[0], addrTBankSelKernel3c[0]) @[FFTEngine.scala 414:34]
      addrTBankSel3c <= _addrTBankSel3c_T_3 @[FFTEngine.scala 414:28]
    else :
      node _addrSBankSel3c_T_4 = mux(procState3c, addrSBankSelProc3c[0], addrSBankSelKernel3c[0]) @[FFTEngine.scala 416:34]
      addrSBankSel3c <= _addrSBankSel3c_T_4 @[FFTEngine.scala 416:28]
      node _addrTBankSel3c_T_4 = mux(procState3c, addrTBankSelProc3c[0], addrTBankSelKernel3c[0]) @[FFTEngine.scala 417:34]
      addrTBankSel3c <= _addrTBankSel3c_T_4 @[FFTEngine.scala 417:28]
    when procState3c : @[FFTEngine.scala 422:34]
      node _T_24 = eq(UInt<1>("h0"), addrSBankSelProc3c[0]) @[FFTEngine.scala 423:31]
      node _T_25 = eq(UInt<1>("h0"), addrTBankSelProc3c[0]) @[FFTEngine.scala 423:66]
      node _T_26 = or(_T_24, _T_25) @[FFTEngine.scala 423:58]
      when _T_26 : @[FFTEngine.scala 423:94]
        node _io_writeEnableSram0Bank_0_T = and(srcBuffer, procState3c) @[FFTEngine.scala 424:65]
        io.writeEnableSram0Bank[0] <= _io_writeEnableSram0Bank_0_T @[FFTEngine.scala 424:52]
        node _io_writeEnableSram1Bank_0_T = eq(srcBuffer, UInt<1>("h0")) @[FFTEngine.scala 425:55]
        node _io_writeEnableSram1Bank_0_T_1 = and(_io_writeEnableSram1Bank_0_T, procState3c) @[FFTEngine.scala 425:66]
        io.writeEnableSram1Bank[0] <= _io_writeEnableSram1Bank_0_T_1 @[FFTEngine.scala 425:52]
      else :
        io.writeEnableSram0Bank[0] <= UInt<1>("h0") @[FFTEngine.scala 427:52]
        io.writeEnableSram1Bank[0] <= UInt<1>("h0") @[FFTEngine.scala 428:52]
    else :
      node _io_writeEnableSram0Bank_0_T_1 = and(srcBuffer, kernelState3c) @[FFTEngine.scala 431:61]
      io.writeEnableSram0Bank[0] <= _io_writeEnableSram0Bank_0_T_1 @[FFTEngine.scala 431:48]
      node _io_writeEnableSram1Bank_0_T_2 = eq(srcBuffer, UInt<1>("h0")) @[FFTEngine.scala 432:51]
      node _io_writeEnableSram1Bank_0_T_3 = and(_io_writeEnableSram1Bank_0_T_2, kernelState3c) @[FFTEngine.scala 432:62]
      io.writeEnableSram1Bank[0] <= _io_writeEnableSram1Bank_0_T_3 @[FFTEngine.scala 432:48]
    when procState3c : @[FFTEngine.scala 422:34]
      node _T_27 = eq(UInt<1>("h1"), addrSBankSelProc3c[0]) @[FFTEngine.scala 423:31]
      node _T_28 = eq(UInt<1>("h1"), addrTBankSelProc3c[0]) @[FFTEngine.scala 423:66]
      node _T_29 = or(_T_27, _T_28) @[FFTEngine.scala 423:58]
      when _T_29 : @[FFTEngine.scala 423:94]
        node _io_writeEnableSram0Bank_1_T = and(srcBuffer, procState3c) @[FFTEngine.scala 424:65]
        io.writeEnableSram0Bank[1] <= _io_writeEnableSram0Bank_1_T @[FFTEngine.scala 424:52]
        node _io_writeEnableSram1Bank_1_T = eq(srcBuffer, UInt<1>("h0")) @[FFTEngine.scala 425:55]
        node _io_writeEnableSram1Bank_1_T_1 = and(_io_writeEnableSram1Bank_1_T, procState3c) @[FFTEngine.scala 425:66]
        io.writeEnableSram1Bank[1] <= _io_writeEnableSram1Bank_1_T_1 @[FFTEngine.scala 425:52]
      else :
        io.writeEnableSram0Bank[1] <= UInt<1>("h0") @[FFTEngine.scala 427:52]
        io.writeEnableSram1Bank[1] <= UInt<1>("h0") @[FFTEngine.scala 428:52]
    else :
      node _io_writeEnableSram0Bank_1_T_1 = and(srcBuffer, kernelState3c) @[FFTEngine.scala 431:61]
      io.writeEnableSram0Bank[1] <= _io_writeEnableSram0Bank_1_T_1 @[FFTEngine.scala 431:48]
      node _io_writeEnableSram1Bank_1_T_2 = eq(srcBuffer, UInt<1>("h0")) @[FFTEngine.scala 432:51]
      node _io_writeEnableSram1Bank_1_T_3 = and(_io_writeEnableSram1Bank_1_T_2, kernelState3c) @[FFTEngine.scala 432:62]
      io.writeEnableSram1Bank[1] <= _io_writeEnableSram1Bank_1_T_3 @[FFTEngine.scala 432:48]
    node _T_30 = eq(procState, UInt<1>("h0")) @[FFTEngine.scala 437:14]
    when _T_30 : @[FFTEngine.scala 437:26]
      node _T_31 = eq(srcBuffer, UInt<1>("h0")) @[FFTEngine.scala 438:28]
      when _T_31 : @[FFTEngine.scala 438:37]
        node _T_32 = or(addrTBankSel, UInt<1>("h0"))
        node _T_33 = bits(_T_32, 0, 0)
        node _io_addrSram0Bank_T = bits(addrT[0], 1, 0) @[FFTEngine.scala 439:59]
        io.addrSram0Bank[_T_33] <= _io_addrSram0Bank_T @[FFTEngine.scala 439:48]
        node _T_34 = or(addrSBankSel, UInt<1>("h0"))
        node _T_35 = bits(_T_34, 0, 0)
        node _io_addrSram0Bank_T_1 = bits(addrS[0], 1, 0) @[FFTEngine.scala 440:59]
        io.addrSram0Bank[_T_35] <= _io_addrSram0Bank_T_1 @[FFTEngine.scala 440:48]
      else :
        node _T_36 = or(addrTBankSel, UInt<1>("h0"))
        node _T_37 = bits(_T_36, 0, 0)
        node _io_addrSram1Bank_T = bits(addrT[0], 1, 0) @[FFTEngine.scala 442:59]
        io.addrSram1Bank[_T_37] <= _io_addrSram1Bank_T @[FFTEngine.scala 442:48]
        node _T_38 = or(addrSBankSel, UInt<1>("h0"))
        node _T_39 = bits(_T_38, 0, 0)
        node _io_addrSram1Bank_T_1 = bits(addrS[0], 1, 0) @[FFTEngine.scala 443:59]
        io.addrSram1Bank[_T_39] <= _io_addrSram1Bank_T_1 @[FFTEngine.scala 443:48]
    else :
      node _T_40 = eq(srcBuffer, UInt<1>("h0")) @[FFTEngine.scala 447:36]
      when _T_40 : @[FFTEngine.scala 447:45]
        node _T_41 = or(addrTBankSel, UInt<1>("h0"))
        node _T_42 = bits(_T_41, 0, 0)
        node _io_addrSram0Bank_T_2 = bits(addrT[0], 1, 0) @[FFTEngine.scala 448:67]
        io.addrSram0Bank[_T_42] <= _io_addrSram0Bank_T_2 @[FFTEngine.scala 448:56]
        node _T_43 = or(addrSBankSel, UInt<1>("h0"))
        node _T_44 = bits(_T_43, 0, 0)
        node _io_addrSram0Bank_T_3 = bits(addrS[0], 1, 0) @[FFTEngine.scala 449:67]
        io.addrSram0Bank[_T_44] <= _io_addrSram0Bank_T_3 @[FFTEngine.scala 449:56]
      else :
        node _T_45 = or(addrTBankSel, UInt<1>("h0"))
        node _T_46 = bits(_T_45, 0, 0)
        node _io_addrSram1Bank_T_2 = bits(addrT[0], 1, 0) @[FFTEngine.scala 451:67]
        io.addrSram1Bank[_T_46] <= _io_addrSram1Bank_T_2 @[FFTEngine.scala 451:56]
        node _T_47 = or(addrSBankSel, UInt<1>("h0"))
        node _T_48 = bits(_T_47, 0, 0)
        node _io_addrSram1Bank_T_3 = bits(addrS[0], 1, 0) @[FFTEngine.scala 452:67]
        io.addrSram1Bank[_T_48] <= _io_addrSram1Bank_T_3 @[FFTEngine.scala 452:56]
    node _T_49 = eq(procState3c, UInt<1>("h0")) @[FFTEngine.scala 457:14]
    when _T_49 : @[FFTEngine.scala 457:28]
      node _T_50 = eq(srcBuffer, UInt<1>("h0")) @[FFTEngine.scala 458:28]
      when _T_50 : @[FFTEngine.scala 458:37]
        node _T_51 = or(addrTBankSel3c, UInt<1>("h0"))
        node _T_52 = bits(_T_51, 0, 0)
        io.addrSram1Bank[_T_52] <= addrT3c @[FFTEngine.scala 459:50]
        node _T_53 = or(addrSBankSel3c, UInt<1>("h0"))
        node _T_54 = bits(_T_53, 0, 0)
        io.addrSram1Bank[_T_54] <= addrS3c @[FFTEngine.scala 460:50]
      else :
        node _T_55 = or(addrTBankSel3c, UInt<1>("h0"))
        node _T_56 = bits(_T_55, 0, 0)
        io.addrSram0Bank[_T_56] <= addrT3c @[FFTEngine.scala 462:50]
        node _T_57 = or(addrSBankSel3c, UInt<1>("h0"))
        node _T_58 = bits(_T_57, 0, 0)
        io.addrSram0Bank[_T_58] <= addrS3c @[FFTEngine.scala 463:50]
    else :
      node _T_59 = eq(srcBuffer, UInt<1>("h0")) @[FFTEngine.scala 467:32]
      when _T_59 : @[FFTEngine.scala 467:41]
        node _T_60 = or(addrTBankSel3c, UInt<1>("h0"))
        node _T_61 = bits(_T_60, 0, 0)
        io.addrSram1Bank[_T_61] <= addrT3c @[FFTEngine.scala 468:54]
        node _T_62 = or(addrSBankSel3c, UInt<1>("h0"))
        node _T_63 = bits(_T_62, 0, 0)
        io.addrSram1Bank[_T_63] <= addrS3c @[FFTEngine.scala 469:54]
      else :
        node _T_64 = or(addrTBankSel3c, UInt<1>("h0"))
        node _T_65 = bits(_T_64, 0, 0)
        io.addrSram0Bank[_T_65] <= addrT3c @[FFTEngine.scala 471:54]
        node _T_66 = or(addrSBankSel3c, UInt<1>("h0"))
        node _T_67 = bits(_T_66, 0, 0)
        io.addrSram0Bank[_T_67] <= addrS3c @[FFTEngine.scala 472:54]
    wire writeDataS3c : { im : Fixed<16><<0>>, re : Fixed<16><<0>>} @[FFTEngine.scala 478:32]
    wire writeDataT3c : { im : Fixed<16><<0>>, re : Fixed<16><<0>>} @[FFTEngine.scala 479:32]
    when sameAddr3c : @[FFTEngine.scala 481:26]
      node _T_68 = eq(phaseCount, UInt<1>("h0")) @[FFTEngine.scala 482:38]
      node _T_69 = and(io.fftMode, _T_68) @[FFTEngine.scala 482:24]
      when _T_69 : @[FFTEngine.scala 482:47]
        writeDataS3c.re <= fftCalc.io.dataOutSR3c @[FFTEngine.scala 483:33]
        writeDataS3c.im <= writeDataTRPre3c @[FFTEngine.scala 484:33]
        writeDataT3c <= writeDataS3c @[FFTEngine.scala 485:30]
      else :
        node _T_70 = eq(io.fftMode, UInt<1>("h0")) @[FFTEngine.scala 486:25]
        node _T_71 = eq(phaseCount, UInt<1>("h1")) @[FFTEngine.scala 486:46]
        node _T_72 = and(_T_70, _T_71) @[FFTEngine.scala 486:32]
        when _T_72 : @[FFTEngine.scala 486:55]
          node _writeDataS3c_re_T = shr(fftCalc.io.dataOutSR3c, 1) @[FFTEngine.scala 487:53]
          writeDataS3c.re <= _writeDataS3c_re_T @[FFTEngine.scala 487:33]
          node _writeDataS3c_im_T = shr(writeDataTRPre3c, 1) @[FFTEngine.scala 488:53]
          writeDataS3c.im <= _writeDataS3c_im_T @[FFTEngine.scala 488:33]
          writeDataT3c <= writeDataS3c @[FFTEngine.scala 489:30]
        else :
          writeDataS3c.re <= fftCalc.io.dataOutSR3c @[FFTEngine.scala 491:33]
          writeDataS3c.im <= fftCalc.io.dataOutSI3c @[FFTEngine.scala 492:33]
          writeDataT3c.re <= writeDataTRPre3c @[FFTEngine.scala 493:33]
          writeDataT3c.im <= writeDataTIPre3c @[FFTEngine.scala 494:33]
    else :
      writeDataS3c.re <= fftCalc.io.dataOutSR3c @[FFTEngine.scala 497:29]
      writeDataS3c.im <= fftCalc.io.dataOutSI3c @[FFTEngine.scala 498:29]
      writeDataT3c.re <= writeDataTRPre3c @[FFTEngine.scala 499:29]
      writeDataT3c.im <= writeDataTIPre3c @[FFTEngine.scala 500:29]
    when procState3c : @[FFTEngine.scala 504:30]
      node _T_73 = eq(UInt<1>("h0"), addrSBankSel3c) @[FFTEngine.scala 506:30]
      when _T_73 : @[FFTEngine.scala 506:50]
        io.writeDataSram0Bank[0] <= writeDataS3c @[FFTEngine.scala 507:50]
        io.writeDataSram1Bank[0] <= writeDataS3c @[FFTEngine.scala 508:50]
      else :
        node _T_74 = eq(UInt<1>("h0"), addrTBankSel3c) @[FFTEngine.scala 509:37]
        when _T_74 : @[FFTEngine.scala 509:57]
          io.writeDataSram0Bank[0] <= writeDataT3c @[FFTEngine.scala 510:50]
          io.writeDataSram1Bank[0] <= writeDataT3c @[FFTEngine.scala 511:50]
    else :
      node _T_75 = eq(UInt<1>("h0"), addrSBankSel3c) @[FFTEngine.scala 515:26]
      when _T_75 : @[FFTEngine.scala 515:46]
        io.writeDataSram0Bank[0] <= writeDataS3c @[FFTEngine.scala 516:46]
        io.writeDataSram1Bank[0] <= writeDataS3c @[FFTEngine.scala 517:46]
      else :
        node _T_76 = eq(UInt<1>("h0"), addrTBankSel3c) @[FFTEngine.scala 518:33]
        when _T_76 : @[FFTEngine.scala 518:53]
          io.writeDataSram0Bank[0] <= writeDataT3c @[FFTEngine.scala 519:46]
          io.writeDataSram1Bank[0] <= writeDataT3c @[FFTEngine.scala 520:46]
    when procState3c : @[FFTEngine.scala 504:30]
      node _T_77 = eq(UInt<1>("h1"), addrSBankSel3c) @[FFTEngine.scala 506:30]
      when _T_77 : @[FFTEngine.scala 506:50]
        io.writeDataSram0Bank[1] <= writeDataS3c @[FFTEngine.scala 507:50]
        io.writeDataSram1Bank[1] <= writeDataS3c @[FFTEngine.scala 508:50]
      else :
        node _T_78 = eq(UInt<1>("h1"), addrTBankSel3c) @[FFTEngine.scala 509:37]
        when _T_78 : @[FFTEngine.scala 509:57]
          io.writeDataSram0Bank[1] <= writeDataT3c @[FFTEngine.scala 510:50]
          io.writeDataSram1Bank[1] <= writeDataT3c @[FFTEngine.scala 511:50]
    else :
      node _T_79 = eq(UInt<1>("h1"), addrSBankSel3c) @[FFTEngine.scala 515:26]
      when _T_79 : @[FFTEngine.scala 515:46]
        io.writeDataSram0Bank[1] <= writeDataS3c @[FFTEngine.scala 516:46]
        io.writeDataSram1Bank[1] <= writeDataS3c @[FFTEngine.scala 517:46]
      else :
        node _T_80 = eq(UInt<1>("h1"), addrTBankSel3c) @[FFTEngine.scala 518:33]
        when _T_80 : @[FFTEngine.scala 518:53]
          io.writeDataSram0Bank[1] <= writeDataT3c @[FFTEngine.scala 519:46]
          io.writeDataSram1Bank[1] <= writeDataT3c @[FFTEngine.scala 520:46]
    node donePre = eq(stateReg, UInt<3>("h7")) @[FFTEngine.scala 526:29]
    reg fftDoneReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[FFTEngine.scala 527:29]
    fftDoneReg <= donePre @[FFTEngine.scala 527:29]
    io.fftDone <= fftDoneReg @[FFTEngine.scala 528:16]

