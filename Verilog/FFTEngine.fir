circuit FFTEngine :
  module FFTTwiddle :
    output io : { flip nk : UInt<3>, flip twiLutCaseIndex : UInt<2>, wR : UInt<12>, wI : UInt<12>}

    wire twi_cos_tb1_p10 : UInt<12>[8] @[FFTTwiddle.scala 32:34]
    twi_cos_tb1_p10[0] <= UInt<12>("h400") @[FFTTwiddle.scala 32:34]
    twi_cos_tb1_p10[1] <= UInt<12>("h3b2") @[FFTTwiddle.scala 32:34]
    twi_cos_tb1_p10[2] <= UInt<12>("h2d4") @[FFTTwiddle.scala 32:34]
    twi_cos_tb1_p10[3] <= UInt<12>("h188") @[FFTTwiddle.scala 32:34]
    twi_cos_tb1_p10[4] <= UInt<12>("h0") @[FFTTwiddle.scala 32:34]
    twi_cos_tb1_p10[5] <= UInt<12>("h0") @[FFTTwiddle.scala 32:34]
    twi_cos_tb1_p10[6] <= UInt<12>("h0") @[FFTTwiddle.scala 32:34]
    twi_cos_tb1_p10[7] <= UInt<12>("h0") @[FFTTwiddle.scala 32:34]
    wire twi_sin_tb1_p10 : UInt<12>[8] @[FFTTwiddle.scala 33:34]
    twi_sin_tb1_p10[0] <= UInt<12>("h0") @[FFTTwiddle.scala 33:34]
    twi_sin_tb1_p10[1] <= UInt<12>("h188") @[FFTTwiddle.scala 33:34]
    twi_sin_tb1_p10[2] <= UInt<12>("h2d4") @[FFTTwiddle.scala 33:34]
    twi_sin_tb1_p10[3] <= UInt<12>("h3b2") @[FFTTwiddle.scala 33:34]
    twi_sin_tb1_p10[4] <= UInt<12>("h400") @[FFTTwiddle.scala 33:34]
    twi_sin_tb1_p10[5] <= UInt<12>("h0") @[FFTTwiddle.scala 33:34]
    twi_sin_tb1_p10[6] <= UInt<12>("h0") @[FFTTwiddle.scala 33:34]
    twi_sin_tb1_p10[7] <= UInt<12>("h0") @[FFTTwiddle.scala 33:34]
    node _idx_r_T = bits(io.nk, 2, 2) @[FFTTwiddle.scala 35:27]
    node _idx_r_T_1 = bits(io.nk, 1, 0) @[FFTTwiddle.scala 35:50]
    node _idx_r_T_2 = orr(_idx_r_T_1) @[FFTTwiddle.scala 35:73]
    node _idx_r_T_3 = and(_idx_r_T, _idx_r_T_2) @[FFTTwiddle.scala 35:43]
    node _idx_r_T_4 = not(io.nk) @[FFTTwiddle.scala 35:80]
    node _idx_r_T_5 = add(_idx_r_T_4, UInt<1>("h1")) @[FFTTwiddle.scala 35:87]
    node _idx_r_T_6 = tail(_idx_r_T_5, 1) @[FFTTwiddle.scala 35:87]
    node idx_r = mux(_idx_r_T_3, _idx_r_T_6, io.nk) @[FFTTwiddle.scala 35:20]
    node _lut_chg_sign_flag_r_T = bits(io.nk, 2, 2) @[FFTTwiddle.scala 37:36]
    node _lut_chg_sign_flag_r_T_1 = bits(io.nk, 1, 0) @[FFTTwiddle.scala 37:60]
    node _lut_chg_sign_flag_r_T_2 = orr(_lut_chg_sign_flag_r_T_1) @[FFTTwiddle.scala 37:83]
    node lut_chg_sign_flag_r = and(_lut_chg_sign_flag_r_T, _lut_chg_sign_flag_r_T_2) @[FFTTwiddle.scala 37:52]
    node idx_i = bits(idx_r, 2, 0) @[FFTTwiddle.scala 41:22]
    node _chg_sign_flag_r_T = eq(io.twiLutCaseIndex, UInt<2>("h2")) @[FFTTwiddle.scala 47:51]
    node _chg_sign_flag_r_T_1 = eq(lut_chg_sign_flag_r, UInt<1>("h0")) @[FFTTwiddle.scala 47:61]
    node chg_sign_flag_r = mux(_chg_sign_flag_r_T, _chg_sign_flag_r_T_1, lut_chg_sign_flag_r) @[FFTTwiddle.scala 47:30]
    node _chg_sign_flag_i_T = eq(io.twiLutCaseIndex, UInt<1>("h1")) @[FFTTwiddle.scala 48:51]
    node _chg_sign_flag_i_T_1 = eq(UInt<1>("h1"), UInt<1>("h0")) @[FFTTwiddle.scala 48:61]
    node chg_sign_flag_i = mux(_chg_sign_flag_i_T, _chg_sign_flag_i_T_1, UInt<1>("h1")) @[FFTTwiddle.scala 48:30]
    node _io_wR_T = not(twi_cos_tb1_p10[idx_r]) @[FFTTwiddle.scala 50:36]
    node _io_wR_T_1 = add(_io_wR_T, UInt<1>("h1")) @[FFTTwiddle.scala 50:45]
    node _io_wR_T_2 = tail(_io_wR_T_1, 1) @[FFTTwiddle.scala 50:45]
    node _io_wR_T_3 = mux(chg_sign_flag_r, _io_wR_T_2, twi_cos_tb1_p10[idx_r]) @[FFTTwiddle.scala 50:17]
    io.wR <= _io_wR_T_3 @[FFTTwiddle.scala 50:11]
    node _io_wI_T = not(twi_sin_tb1_p10[idx_i]) @[FFTTwiddle.scala 51:36]
    node _io_wI_T_1 = add(_io_wI_T, UInt<1>("h1")) @[FFTTwiddle.scala 51:45]
    node _io_wI_T_2 = tail(_io_wI_T_1, 1) @[FFTTwiddle.scala 51:45]
    node _io_wI_T_3 = mux(chg_sign_flag_i, _io_wI_T_2, twi_sin_tb1_p10[idx_i]) @[FFTTwiddle.scala 51:17]
    io.wI <= _io_wI_T_3 @[FFTTwiddle.scala 51:11]

  module FFTMultiply :
    output io : { flip a : UInt<18>, flip b : UInt<18>, flip tc : UInt<1>, product : UInt<36>}

    node _temp_a_T = bits(io.a, 17, 17) @[FFTMultiply.scala 14:26]
    node _temp_a_T_1 = not(io.a) @[FFTMultiply.scala 14:51]
    node _temp_a_T_2 = add(_temp_a_T_1, UInt<1>("h1")) @[FFTMultiply.scala 14:57]
    node _temp_a_T_3 = tail(_temp_a_T_2, 1) @[FFTMultiply.scala 14:57]
    node temp_a = mux(_temp_a_T, _temp_a_T_3, io.a) @[FFTMultiply.scala 14:21]
    node _temp_b_T = bits(io.b, 17, 17) @[FFTMultiply.scala 15:26]
    node _temp_b_T_1 = not(io.b) @[FFTMultiply.scala 15:51]
    node _temp_b_T_2 = add(_temp_b_T_1, UInt<1>("h1")) @[FFTMultiply.scala 15:57]
    node _temp_b_T_3 = tail(_temp_b_T_2, 1) @[FFTMultiply.scala 15:57]
    node temp_b = mux(_temp_b_T, _temp_b_T_3, io.b) @[FFTMultiply.scala 15:21]
    node long_temp1 = mul(temp_a, temp_b) @[FFTMultiply.scala 17:29]
    node _long_temp2_T = sub(long_temp1, UInt<1>("h1")) @[FFTMultiply.scala 18:35]
    node _long_temp2_T_1 = tail(_long_temp2_T, 1) @[FFTMultiply.scala 18:35]
    node long_temp2 = not(_long_temp2_T_1) @[FFTMultiply.scala 18:22]
    node _io_product_T = xor(io.a, io.a) @[FFTMultiply.scala 20:31]
    node _io_product_T_1 = xorr(_io_product_T) @[FFTMultiply.scala 20:39]
    node _io_product_T_2 = neq(_io_product_T_1, UInt<1>("h0")) @[FFTMultiply.scala 20:44]
    node _io_product_T_3 = xor(io.b, io.b) @[FFTMultiply.scala 20:67]
    node _io_product_T_4 = xorr(_io_product_T_3) @[FFTMultiply.scala 20:75]
    node _io_product_T_5 = neq(_io_product_T_4, UInt<1>("h0")) @[FFTMultiply.scala 20:80]
    node _io_product_T_6 = or(_io_product_T_2, _io_product_T_5) @[FFTMultiply.scala 20:57]
    node _io_product_T_7 = xor(io.tc, io.tc) @[FFTMultiply.scala 20:104]
    node _io_product_T_8 = xorr(_io_product_T_7) @[FFTMultiply.scala 20:113]
    node _io_product_T_9 = neq(_io_product_T_8, UInt<1>("h0")) @[FFTMultiply.scala 20:118]
    node _io_product_T_10 = or(_io_product_T_6, _io_product_T_9) @[FFTMultiply.scala 20:93]
    node _io_product_T_11 = mux(UInt<1>("h1"), UInt<36>("hfffffffff"), UInt<36>("h0")) @[Bitwise.scala 77:12]
    node _io_product_T_12 = bits(io.a, 17, 17) @[FFTMultiply.scala 20:194]
    node _io_product_T_13 = bits(io.b, 17, 17) @[FFTMultiply.scala 20:223]
    node _io_product_T_14 = xor(_io_product_T_12, _io_product_T_13) @[FFTMultiply.scala 20:217]
    node _io_product_T_15 = orr(long_temp1) @[FFTMultiply.scala 20:262]
    node _io_product_T_16 = and(_io_product_T_14, _io_product_T_15) @[FFTMultiply.scala 20:247]
    node _io_product_T_17 = cat(UInt<1>("h1"), long_temp2) @[Cat.scala 33:92]
    node _io_product_T_18 = cat(UInt<1>("h0"), long_temp1) @[Cat.scala 33:92]
    node _io_product_T_19 = mux(_io_product_T_16, _io_product_T_17, _io_product_T_18) @[FFTMultiply.scala 20:187]
    node _io_product_T_20 = mul(io.a, io.b) @[FFTMultiply.scala 20:329]
    node _io_product_T_21 = mux(io.tc, _io_product_T_19, _io_product_T_20) @[FFTMultiply.scala 20:176]
    node _io_product_T_22 = mux(_io_product_T_10, _io_product_T_11, _io_product_T_21) @[FFTMultiply.scala 20:22]
    io.product <= _io_product_T_22 @[FFTMultiply.scala 20:16]

  module FFTEngine :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip readDataSram0Bank : UInt<32>[2], flip readDataSram1Bank : UInt<32>[2], readEnableSram0Bank : UInt<1>[2], readEnableSram1Bank : UInt<1>[2], writeDataSram0Bank : UInt<32>[2], writeDataSram1Bank : UInt<32>[2], writeEnableSram0Bank : UInt<1>[2], writeEnableSram1Bank : UInt<1>[2], addrSram0Bank : UInt<2>[2], addrSram1Bank : UInt<2>[2], fftDone : UInt<1>, flip fftEnable : UInt<1>, flip fftEngineKick : UInt<1>, flip fftMode : UInt<1>, flip fftRShiftP0 : UInt<1>[3], flip fftRShiftP1 : UInt<1>[2]}

    clock is invalid
    reset is invalid
    io is invalid
    node isFFT = eq(io.fftMode, UInt<1>("h0")) @[FFTEngine.scala 40:17]
    reg stateReg : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[FFTEngine.scala 42:27]
    reg radixCount : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[FFTEngine.scala 44:29]
    reg phaseCount : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[FFTEngine.scala 46:29]
    node _T = eq(UInt<3>("h0"), stateReg) @[FFTEngine.scala 48:22]
    when _T : @[FFTEngine.scala 48:22]
      when io.fftEngineKick : @[FFTEngine.scala 50:36]
        stateReg <= UInt<3>("h1") @[FFTEngine.scala 51:26]
      else :
        stateReg <= stateReg @[FFTEngine.scala 53:26]
    else :
      node _T_1 = eq(UInt<3>("h1"), stateReg) @[FFTEngine.scala 48:22]
      when _T_1 : @[FFTEngine.scala 48:22]
        node _T_2 = eq(radixCount, UInt<2>("h3")) @[FFTEngine.scala 57:29]
        when _T_2 : @[FFTEngine.scala 57:46]
          stateReg <= UInt<3>("h2") @[FFTEngine.scala 58:26]
        else :
          stateReg <= stateReg @[FFTEngine.scala 60:26]
      else :
        node _T_3 = eq(UInt<3>("h2"), stateReg) @[FFTEngine.scala 48:22]
        when _T_3 : @[FFTEngine.scala 48:22]
          node _T_4 = eq(radixCount, UInt<2>("h3")) @[FFTEngine.scala 64:29]
          when _T_4 : @[FFTEngine.scala 64:45]
            stateReg <= UInt<3>("h3") @[FFTEngine.scala 65:26]
          else :
            stateReg <= stateReg @[FFTEngine.scala 67:26]
        else :
          node _T_5 = eq(UInt<3>("h3"), stateReg) @[FFTEngine.scala 48:22]
          when _T_5 : @[FFTEngine.scala 48:22]
            node _T_6 = eq(phaseCount, UInt<2>("h2")) @[FFTEngine.scala 71:29]
            when _T_6 : @[FFTEngine.scala 71:46]
              stateReg <= UInt<3>("h4") @[FFTEngine.scala 72:26]
            else :
              stateReg <= UInt<3>("h1") @[FFTEngine.scala 74:26]
          else :
            node _T_7 = eq(UInt<3>("h4"), stateReg) @[FFTEngine.scala 48:22]
            when _T_7 : @[FFTEngine.scala 48:22]
              stateReg <= UInt<3>("h0") @[FFTEngine.scala 78:22]
    node _radixInit_T = eq(stateReg, UInt<3>("h0")) @[FFTEngine.scala 82:31]
    node _radixInit_T_1 = eq(stateReg, UInt<3>("h1")) @[FFTEngine.scala 83:16]
    node _radixInit_T_2 = eq(radixCount, UInt<2>("h3")) @[FFTEngine.scala 83:45]
    node _radixInit_T_3 = and(_radixInit_T_1, _radixInit_T_2) @[FFTEngine.scala 83:30]
    node _radixInit_T_4 = or(_radixInit_T, _radixInit_T_3) @[FFTEngine.scala 82:45]
    node _radixInit_T_5 = eq(stateReg, UInt<3>("h2")) @[FFTEngine.scala 84:16]
    node _radixInit_T_6 = eq(radixCount, UInt<2>("h3")) @[FFTEngine.scala 84:46]
    node _radixInit_T_7 = and(_radixInit_T_5, _radixInit_T_6) @[FFTEngine.scala 84:31]
    node _radixInit_T_8 = or(_radixInit_T_4, _radixInit_T_7) @[FFTEngine.scala 83:63]
    node _radixInit_T_9 = eq(stateReg, UInt<3>("h3")) @[FFTEngine.scala 85:15]
    node _radixInit_T_10 = or(_radixInit_T_8, _radixInit_T_9) @[FFTEngine.scala 84:63]
    node _radixInit_T_11 = eq(stateReg, UInt<3>("h4")) @[FFTEngine.scala 86:15]
    node radixInit = or(_radixInit_T_10, _radixInit_T_11) @[FFTEngine.scala 85:32]
    node _radixUp_T = eq(stateReg, UInt<3>("h1")) @[FFTEngine.scala 88:29]
    node _radixUp_T_1 = eq(stateReg, UInt<3>("h2")) @[FFTEngine.scala 88:55]
    node radixUp = or(_radixUp_T, _radixUp_T_1) @[FFTEngine.scala 88:43]
    when radixInit : @[FFTEngine.scala 90:21]
      radixCount <= UInt<1>("h0") @[FFTEngine.scala 91:20]
    else :
      when radixUp : @[FFTEngine.scala 92:26]
        node _radixCount_T = add(radixCount, UInt<1>("h1")) @[FFTEngine.scala 93:34]
        node _radixCount_T_1 = tail(_radixCount_T, 1) @[FFTEngine.scala 93:34]
        radixCount <= _radixCount_T_1 @[FFTEngine.scala 93:20]
      else :
        radixCount <= radixCount @[FFTEngine.scala 95:20]
    node _phaseInit_T = eq(stateReg, UInt<3>("h0")) @[FFTEngine.scala 98:31]
    node _phaseInit_T_1 = eq(stateReg, UInt<3>("h3")) @[FFTEngine.scala 99:16]
    node _phaseInit_T_2 = eq(phaseCount, UInt<2>("h2")) @[FFTEngine.scala 99:47]
    node _phaseInit_T_3 = and(_phaseInit_T_1, _phaseInit_T_2) @[FFTEngine.scala 99:33]
    node _phaseInit_T_4 = or(_phaseInit_T, _phaseInit_T_3) @[FFTEngine.scala 98:45]
    node _phaseInit_T_5 = eq(stateReg, UInt<3>("h4")) @[FFTEngine.scala 100:15]
    node phaseInit = or(_phaseInit_T_4, _phaseInit_T_5) @[FFTEngine.scala 99:65]
    node phaseUp = eq(stateReg, UInt<3>("h3")) @[FFTEngine.scala 102:29]
    when phaseInit : @[FFTEngine.scala 104:21]
      phaseCount <= UInt<1>("h0") @[FFTEngine.scala 105:20]
    else :
      when phaseUp : @[FFTEngine.scala 106:26]
        node _phaseCount_T = add(phaseCount, UInt<1>("h1")) @[FFTEngine.scala 107:34]
        node _phaseCount_T_1 = tail(_phaseCount_T, 1) @[FFTEngine.scala 107:34]
        phaseCount <= _phaseCount_T_1 @[FFTEngine.scala 107:20]
      else :
        phaseCount <= phaseCount @[FFTEngine.scala 109:20]
    reg srcBuffer : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[FFTEngine.scala 112:28]
    node _srcBufferNext_T = eq(stateReg, UInt<3>("h3")) @[FFTEngine.scala 114:35]
    node _srcBufferNext_T_1 = eq(srcBuffer, UInt<1>("h0")) @[FFTEngine.scala 114:54]
    node srcBufferNext = and(_srcBufferNext_T, _srcBufferNext_T_1) @[FFTEngine.scala 114:52]
    node _srcUp_T = eq(stateReg, UInt<3>("h0")) @[FFTEngine.scala 116:27]
    node _srcUp_T_1 = eq(stateReg, UInt<3>("h3")) @[FFTEngine.scala 116:53]
    node srcUp = or(_srcUp_T, _srcUp_T_1) @[FFTEngine.scala 116:41]
    when srcUp : @[FFTEngine.scala 118:17]
      srcBuffer <= srcBufferNext @[FFTEngine.scala 119:19]
    else :
      srcBuffer <= srcBuffer @[FFTEngine.scala 121:19]
    node kernelState = eq(stateReg, UInt<3>("h1")) @[FFTEngine.scala 124:33]
    node radixCountTemp = bits(radixCount, 1, 0) @[FFTEngine.scala 128:36]
    wire addrSPre : UInt[1] @[FFTEngine.scala 135:24]
    wire addrTPre : UInt[1] @[FFTEngine.scala 136:24]
    node _T_8 = cat(radixCountTemp, UInt<1>("h0")) @[Cat.scala 33:92]
    node _dataTemp_T = cat(_T_8, _T_8) @[Cat.scala 33:92]
    node dataTemp = dshl(_dataTemp_T, phaseCount) @[FFTEngine.scala 131:40]
    node _T_9 = bits(dataTemp, 5, 3) @[FFTEngine.scala 132:17]
    addrSPre[0] <= _T_9 @[FFTEngine.scala 139:18]
    node _T_10 = cat(radixCountTemp, UInt<1>("h1")) @[Cat.scala 33:92]
    node _dataTemp_T_1 = cat(_T_10, _T_10) @[Cat.scala 33:92]
    node dataTemp_1 = dshl(_dataTemp_T_1, phaseCount) @[FFTEngine.scala 131:40]
    node _T_11 = bits(dataTemp_1, 5, 3) @[FFTEngine.scala 132:17]
    addrTPre[0] <= _T_11 @[FFTEngine.scala 140:18]
    wire nk : UInt[1] @[FFTEngine.scala 161:18]
    node _T_12 = bits(radixCount, 1, 0) @[FFTEngine.scala 164:74]
    wire _WIRE : UInt<1>[2] @[FFTEngine.scala 164:132]
    _WIRE[0] <= UInt<1>("h1") @[FFTEngine.scala 164:132]
    _WIRE[1] <= UInt<1>("h1") @[FFTEngine.scala 164:132]
    node _T_13 = cat(_WIRE[1], _WIRE[0]) @[FFTEngine.scala 164:163]
    node _T_14 = cat(UInt<1>("h0"), _T_13) @[Cat.scala 33:92]
    node _T_15 = dshr(_T_14, phaseCount) @[FFTEngine.scala 164:171]
    node _T_16 = not(_T_15) @[FFTEngine.scala 164:109]
    node _T_17 = and(_T_12, _T_16) @[FFTEngine.scala 164:107]
    nk[0] <= _T_17 @[FFTEngine.scala 164:12]
    node _addrS_addrTemp_T = bits(addrSPre[0], 2, 2) @[FFTEngine.scala 172:35]
    node _addrS_addrTemp_T_1 = bits(addrSPre[0], 0, 0) @[FFTEngine.scala 172:61]
    node addrS_addrTemp_0 = mux(UInt<1>("h1"), _addrS_addrTemp_T, _addrS_addrTemp_T_1) @[FFTEngine.scala 172:26]
    node _addrS_addrTemp_T_2 = bits(addrSPre[0], 1, 1) @[FFTEngine.scala 172:35]
    node _addrS_addrTemp_T_3 = bits(addrSPre[0], 1, 1) @[FFTEngine.scala 172:61]
    node addrS_addrTemp_1 = mux(UInt<1>("h1"), _addrS_addrTemp_T_2, _addrS_addrTemp_T_3) @[FFTEngine.scala 172:26]
    node _addrS_addrTemp_T_4 = bits(addrSPre[0], 0, 0) @[FFTEngine.scala 172:35]
    node _addrS_addrTemp_T_5 = bits(addrSPre[0], 2, 2) @[FFTEngine.scala 172:61]
    node addrS_addrTemp_2 = mux(UInt<1>("h1"), _addrS_addrTemp_T_4, _addrS_addrTemp_T_5) @[FFTEngine.scala 172:26]
    wire _addrS_WIRE : UInt<1>[3] @[FFTEngine.scala 176:78]
    _addrS_WIRE[0] <= addrS_addrTemp_0 @[FFTEngine.scala 176:78]
    _addrS_WIRE[1] <= addrS_addrTemp_1 @[FFTEngine.scala 176:78]
    _addrS_WIRE[2] <= addrS_addrTemp_2 @[FFTEngine.scala 176:78]
    node addrS_hi = cat(_addrS_WIRE[2], _addrS_WIRE[1]) @[FFTEngine.scala 176:133]
    node addrS_0 = cat(addrS_hi, _addrS_WIRE[0]) @[FFTEngine.scala 176:133]
    node _addrT_addrTemp_T = bits(addrTPre[0], 2, 2) @[FFTEngine.scala 172:35]
    node _addrT_addrTemp_T_1 = bits(addrTPre[0], 0, 0) @[FFTEngine.scala 172:61]
    node addrT_addrTemp_0 = mux(UInt<1>("h1"), _addrT_addrTemp_T, _addrT_addrTemp_T_1) @[FFTEngine.scala 172:26]
    node _addrT_addrTemp_T_2 = bits(addrTPre[0], 1, 1) @[FFTEngine.scala 172:35]
    node _addrT_addrTemp_T_3 = bits(addrTPre[0], 1, 1) @[FFTEngine.scala 172:61]
    node addrT_addrTemp_1 = mux(UInt<1>("h1"), _addrT_addrTemp_T_2, _addrT_addrTemp_T_3) @[FFTEngine.scala 172:26]
    node _addrT_addrTemp_T_4 = bits(addrTPre[0], 0, 0) @[FFTEngine.scala 172:35]
    node _addrT_addrTemp_T_5 = bits(addrTPre[0], 2, 2) @[FFTEngine.scala 172:61]
    node addrT_addrTemp_2 = mux(UInt<1>("h1"), _addrT_addrTemp_T_4, _addrT_addrTemp_T_5) @[FFTEngine.scala 172:26]
    wire _addrT_WIRE : UInt<1>[3] @[FFTEngine.scala 177:78]
    _addrT_WIRE[0] <= addrT_addrTemp_0 @[FFTEngine.scala 177:78]
    _addrT_WIRE[1] <= addrT_addrTemp_1 @[FFTEngine.scala 177:78]
    _addrT_WIRE[2] <= addrT_addrTemp_2 @[FFTEngine.scala 177:78]
    node addrT_hi = cat(_addrT_WIRE[2], _addrT_WIRE[1]) @[FFTEngine.scala 177:133]
    node addrT_0 = cat(addrT_hi, _addrT_WIRE[0]) @[FFTEngine.scala 177:133]
    node _addrSBankSelPrePre_sum_T = dshr(addrS_0, UInt<1>("h0")) @[FFTEngine.scala 181:115]
    node _addrSBankSelPrePre_sum_T_1 = bits(_addrSBankSelPrePre_sum_T, 0, 0) @[FFTEngine.scala 181:115]
    node _addrSBankSelPrePre_sum_T_2 = add(UInt<1>("h0"), _addrSBankSelPrePre_sum_T_1) @[FFTEngine.scala 181:107]
    node _addrSBankSelPrePre_sum_T_3 = tail(_addrSBankSelPrePre_sum_T_2, 1) @[FFTEngine.scala 181:107]
    node _addrSBankSelPrePre_sum_T_4 = dshr(addrS_0, UInt<1>("h1")) @[FFTEngine.scala 181:115]
    node _addrSBankSelPrePre_sum_T_5 = bits(_addrSBankSelPrePre_sum_T_4, 0, 0) @[FFTEngine.scala 181:115]
    node _addrSBankSelPrePre_sum_T_6 = add(_addrSBankSelPrePre_sum_T_3, _addrSBankSelPrePre_sum_T_5) @[FFTEngine.scala 181:107]
    node _addrSBankSelPrePre_sum_T_7 = tail(_addrSBankSelPrePre_sum_T_6, 1) @[FFTEngine.scala 181:107]
    node _addrSBankSelPrePre_sum_T_8 = dshr(addrS_0, UInt<2>("h2")) @[FFTEngine.scala 181:115]
    node _addrSBankSelPrePre_sum_T_9 = bits(_addrSBankSelPrePre_sum_T_8, 0, 0) @[FFTEngine.scala 181:115]
    node _addrSBankSelPrePre_sum_T_10 = add(_addrSBankSelPrePre_sum_T_7, _addrSBankSelPrePre_sum_T_9) @[FFTEngine.scala 181:107]
    node addrSBankSelPrePre_0_0 = tail(_addrSBankSelPrePre_sum_T_10, 1) @[FFTEngine.scala 181:107]
    node _addrSBankSelPre_T = shl(UInt<1>("h0"), 1) @[FFTEngine.scala 187:126]
    node _addrSBankSelPre_T_1 = add(_addrSBankSelPre_T, addrSBankSelPrePre_0_0) @[FFTEngine.scala 187:132]
    node _addrSBankSelPre_T_2 = tail(_addrSBankSelPre_T_1, 1) @[FFTEngine.scala 187:132]
    node addrSBankSelPre_0 = bits(_addrSBankSelPre_T_2, 0, 0) @[FFTEngine.scala 187:148]
    wire addrSBankSel : UInt[1] @[FFTEngine.scala 189:28]
    node _addrSBankSel_0_T = mux(kernelState, addrSBankSelPre_0, UInt<1>("h0")) @[FFTEngine.scala 191:27]
    addrSBankSel[0] <= _addrSBankSel_0_T @[FFTEngine.scala 191:21]
    node _addrTBankSelPrePre_sum_T = dshr(addrT_0, UInt<1>("h0")) @[FFTEngine.scala 181:115]
    node _addrTBankSelPrePre_sum_T_1 = bits(_addrTBankSelPrePre_sum_T, 0, 0) @[FFTEngine.scala 181:115]
    node _addrTBankSelPrePre_sum_T_2 = add(UInt<1>("h0"), _addrTBankSelPrePre_sum_T_1) @[FFTEngine.scala 181:107]
    node _addrTBankSelPrePre_sum_T_3 = tail(_addrTBankSelPrePre_sum_T_2, 1) @[FFTEngine.scala 181:107]
    node _addrTBankSelPrePre_sum_T_4 = dshr(addrT_0, UInt<1>("h1")) @[FFTEngine.scala 181:115]
    node _addrTBankSelPrePre_sum_T_5 = bits(_addrTBankSelPrePre_sum_T_4, 0, 0) @[FFTEngine.scala 181:115]
    node _addrTBankSelPrePre_sum_T_6 = add(_addrTBankSelPrePre_sum_T_3, _addrTBankSelPrePre_sum_T_5) @[FFTEngine.scala 181:107]
    node _addrTBankSelPrePre_sum_T_7 = tail(_addrTBankSelPrePre_sum_T_6, 1) @[FFTEngine.scala 181:107]
    node _addrTBankSelPrePre_sum_T_8 = dshr(addrT_0, UInt<2>("h2")) @[FFTEngine.scala 181:115]
    node _addrTBankSelPrePre_sum_T_9 = bits(_addrTBankSelPrePre_sum_T_8, 0, 0) @[FFTEngine.scala 181:115]
    node _addrTBankSelPrePre_sum_T_10 = add(_addrTBankSelPrePre_sum_T_7, _addrTBankSelPrePre_sum_T_9) @[FFTEngine.scala 181:107]
    node addrTBankSelPrePre_0_0 = tail(_addrTBankSelPrePre_sum_T_10, 1) @[FFTEngine.scala 181:107]
    node _addrTBankSelPre_T = shl(UInt<1>("h0"), 1) @[FFTEngine.scala 203:126]
    node _addrTBankSelPre_T_1 = add(_addrTBankSelPre_T, addrTBankSelPrePre_0_0) @[FFTEngine.scala 203:132]
    node _addrTBankSelPre_T_2 = tail(_addrTBankSelPre_T_1, 1) @[FFTEngine.scala 203:132]
    node addrTBankSelPre_0 = bits(_addrTBankSelPre_T_2, 0, 0) @[FFTEngine.scala 203:148]
    wire addrTBankSel : UInt[1] @[FFTEngine.scala 205:28]
    node _addrTBankSel_0_T = mux(kernelState, addrTBankSelPre_0, UInt<1>("h1")) @[FFTEngine.scala 207:27]
    addrTBankSel[0] <= _addrTBankSel_0_T @[FFTEngine.scala 207:21]
    wire _readAddrBank_WIRE : UInt<2>[2] @[FFTEngine.scala 217:43]
    _readAddrBank_WIRE[0] <= UInt<2>("h0") @[FFTEngine.scala 217:43]
    _readAddrBank_WIRE[1] <= UInt<2>("h0") @[FFTEngine.scala 217:43]
    wire readAddrBank : UInt<2>[2]
    readAddrBank <= _readAddrBank_WIRE
    node _T_18 = or(addrSBankSel[0], UInt<1>("h0"))
    node _T_19 = bits(_T_18, 0, 0)
    node _readAddrBank_T = bits(addrS_0, 1, 0) @[FFTEngine.scala 220:50]
    readAddrBank[_T_19] <= _readAddrBank_T @[FFTEngine.scala 220:39]
    node _T_20 = or(addrTBankSel[0], UInt<1>("h0"))
    node _T_21 = bits(_T_20, 0, 0)
    node _readAddrBank_T_1 = bits(addrT_0, 1, 0) @[FFTEngine.scala 224:50]
    readAddrBank[_T_21] <= _readAddrBank_T_1 @[FFTEngine.scala 224:39]
    node _T_22 = eq(srcBuffer, UInt<1>("h0")) @[FFTEngine.scala 227:88]
    node _T_23 = and(kernelState, _T_22) @[FFTEngine.scala 227:86]
    node _T_24 = eq(srcBuffer, UInt<1>("h0")) @[FFTEngine.scala 227:88]
    node _T_25 = and(kernelState, _T_24) @[FFTEngine.scala 227:86]
    wire _WIRE_1 : UInt<1>[2] @[FFTEngine.scala 227:38]
    _WIRE_1[0] <= _T_23 @[FFTEngine.scala 227:38]
    _WIRE_1[1] <= _T_25 @[FFTEngine.scala 227:38]
    io.readEnableSram0Bank <= _WIRE_1 @[FFTEngine.scala 227:28]
    node _T_26 = and(kernelState, srcBuffer) @[FFTEngine.scala 228:86]
    node _T_27 = and(kernelState, srcBuffer) @[FFTEngine.scala 228:86]
    wire _WIRE_2 : UInt<1>[2] @[FFTEngine.scala 228:38]
    _WIRE_2[0] <= _T_26 @[FFTEngine.scala 228:38]
    _WIRE_2[1] <= _T_27 @[FFTEngine.scala 228:38]
    io.readEnableSram1Bank <= _WIRE_2 @[FFTEngine.scala 228:28]
    wire addrSBankSel1c : UInt[1] @[FFTEngine.scala 230:30]
    wire addrSBankSel2c : UInt[1] @[FFTEngine.scala 231:30]
    wire addrSBankSel3c : UInt[1] @[FFTEngine.scala 232:30]
    reg addrSBankSel1c_0_r : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when UInt<1>("h1") : @[Reg.scala 36:18]
      addrSBankSel1c_0_r <= addrSBankSel[0] @[Reg.scala 36:22]
    addrSBankSel1c[0] <= addrSBankSel1c_0_r @[FFTEngine.scala 235:27]
    reg addrSBankSel2c_0_r : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when UInt<1>("h1") : @[Reg.scala 36:18]
      addrSBankSel2c_0_r <= addrSBankSel1c[0] @[Reg.scala 36:22]
    addrSBankSel2c[0] <= addrSBankSel2c_0_r @[FFTEngine.scala 236:27]
    reg addrSBankSel3c_0_r : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when UInt<1>("h1") : @[Reg.scala 36:18]
      addrSBankSel3c_0_r <= addrSBankSel2c[0] @[Reg.scala 36:22]
    addrSBankSel3c[0] <= addrSBankSel3c_0_r @[FFTEngine.scala 237:27]
    wire addrTBankSel1c : UInt[1] @[FFTEngine.scala 240:30]
    wire addrTBankSel2c : UInt[1] @[FFTEngine.scala 241:30]
    wire addrTBankSel3c : UInt[1] @[FFTEngine.scala 242:30]
    reg addrTBankSel1c_0_r : UInt, clock with :
      reset => (reset, UInt<1>("h1")) @[Reg.scala 35:20]
    when UInt<1>("h1") : @[Reg.scala 36:18]
      addrTBankSel1c_0_r <= addrTBankSel[0] @[Reg.scala 36:22]
    addrTBankSel1c[0] <= addrTBankSel1c_0_r @[FFTEngine.scala 245:27]
    reg addrTBankSel2c_0_r : UInt, clock with :
      reset => (reset, UInt<1>("h1")) @[Reg.scala 35:20]
    when UInt<1>("h1") : @[Reg.scala 36:18]
      addrTBankSel2c_0_r <= addrTBankSel1c[0] @[Reg.scala 36:22]
    addrTBankSel2c[0] <= addrTBankSel2c_0_r @[FFTEngine.scala 246:27]
    reg addrTBankSel3c_0_r : UInt, clock with :
      reset => (reset, UInt<1>("h1")) @[Reg.scala 35:20]
    when UInt<1>("h1") : @[Reg.scala 36:18]
      addrTBankSel3c_0_r <= addrTBankSel2c[0] @[Reg.scala 36:22]
    addrTBankSel3c[0] <= addrTBankSel3c_0_r @[FFTEngine.scala 247:27]
    reg kernelState1c : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when UInt<1>("h1") : @[Reg.scala 36:18]
      kernelState1c <= kernelState @[Reg.scala 36:22]
    reg kernelState2c : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when UInt<1>("h1") : @[Reg.scala 36:18]
      kernelState2c <= kernelState1c @[Reg.scala 36:22]
    reg kernelState3c : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when UInt<1>("h1") : @[Reg.scala 36:18]
      kernelState3c <= kernelState2c @[Reg.scala 36:22]
    wire dataInRPre : UInt[2] @[FFTEngine.scala 254:26]
    wire dataInIPre : UInt[2] @[FFTEngine.scala 255:26]
    node _dataInRPre_0_T = bits(io.readDataSram1Bank[0], 15, 0) @[FFTEngine.scala 258:64]
    node _dataInRPre_0_T_1 = bits(io.readDataSram0Bank[0], 15, 0) @[FFTEngine.scala 258:110]
    node _dataInRPre_0_T_2 = mux(srcBuffer, _dataInRPre_0_T, _dataInRPre_0_T_1) @[FFTEngine.scala 258:29]
    dataInRPre[0] <= _dataInRPre_0_T_2 @[FFTEngine.scala 258:23]
    node _dataInIPre_0_T = bits(io.readDataSram1Bank[0], 31, 16) @[FFTEngine.scala 259:64]
    node _dataInIPre_0_T_1 = bits(io.readDataSram0Bank[0], 31, 16) @[FFTEngine.scala 259:135]
    node _dataInIPre_0_T_2 = mux(srcBuffer, _dataInIPre_0_T, _dataInIPre_0_T_1) @[FFTEngine.scala 259:29]
    dataInIPre[0] <= _dataInIPre_0_T_2 @[FFTEngine.scala 259:23]
    node _dataInRPre_1_T = bits(io.readDataSram1Bank[1], 15, 0) @[FFTEngine.scala 258:64]
    node _dataInRPre_1_T_1 = bits(io.readDataSram0Bank[1], 15, 0) @[FFTEngine.scala 258:110]
    node _dataInRPre_1_T_2 = mux(srcBuffer, _dataInRPre_1_T, _dataInRPre_1_T_1) @[FFTEngine.scala 258:29]
    dataInRPre[1] <= _dataInRPre_1_T_2 @[FFTEngine.scala 258:23]
    node _dataInIPre_1_T = bits(io.readDataSram1Bank[1], 31, 16) @[FFTEngine.scala 259:64]
    node _dataInIPre_1_T_1 = bits(io.readDataSram0Bank[1], 31, 16) @[FFTEngine.scala 259:135]
    node _dataInIPre_1_T_2 = mux(srcBuffer, _dataInIPre_1_T, _dataInIPre_1_T_1) @[FFTEngine.scala 259:29]
    dataInIPre[1] <= _dataInIPre_1_T_2 @[FFTEngine.scala 259:23]
    node _addrS1c_T = bits(addrS_0, 1, 0) @[FFTEngine.scala 262:45]
    reg addrS1c : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when UInt<1>("h1") : @[Reg.scala 36:18]
      addrS1c <= _addrS1c_T @[Reg.scala 36:22]
    reg addrS2c : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when UInt<1>("h1") : @[Reg.scala 36:18]
      addrS2c <= addrS1c @[Reg.scala 36:22]
    reg addrS3c : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when UInt<1>("h1") : @[Reg.scala 36:18]
      addrS3c <= addrS2c @[Reg.scala 36:22]
    node _addrT1c_T = bits(addrT_0, 1, 0) @[FFTEngine.scala 266:45]
    reg addrT1c : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when UInt<1>("h1") : @[Reg.scala 36:18]
      addrT1c <= _addrT1c_T @[Reg.scala 36:22]
    reg addrT2c : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when UInt<1>("h1") : @[Reg.scala 36:18]
      addrT2c <= addrT1c @[Reg.scala 36:22]
    reg addrT3c : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when UInt<1>("h1") : @[Reg.scala 36:18]
      addrT3c <= addrT2c @[Reg.scala 36:22]
    node _dataInSR_T = or(addrSBankSel[0], UInt<1>("h0"))
    node _dataInSR_T_1 = bits(_dataInSR_T, 0, 0)
    node _dataInSI_T = or(addrSBankSel[0], UInt<1>("h0"))
    node _dataInSI_T_1 = bits(_dataInSI_T, 0, 0)
    node _dataInTR_T = or(addrTBankSel[0], UInt<1>("h0"))
    node _dataInTR_T_1 = bits(_dataInTR_T, 0, 0)
    node _dataInTI_T = or(addrTBankSel[0], UInt<1>("h0"))
    node _dataInTI_T_1 = bits(_dataInTI_T, 0, 0)
    node _dataInSRRnd_T = bits(dataInRPre[_dataInSR_T_1], 15, 15) @[FFTEngine.scala 277:39]
    node _dataInSRRnd_T_1 = bits(dataInRPre[_dataInSR_T_1], 15, 1) @[FFTEngine.scala 277:67]
    node _dataInSRRnd_T_2 = cat(_dataInSRRnd_T, _dataInSRRnd_T_1) @[Cat.scala 33:92]
    node _dataInSRRnd_T_3 = mux(UInt<1>("h0"), UInt<15>("h7fff"), UInt<15>("h0")) @[Bitwise.scala 77:12]
    node _dataInSRRnd_T_4 = bits(dataInRPre[_dataInSR_T_1], 0, 0) @[FFTEngine.scala 277:133]
    node _dataInSRRnd_T_5 = cat(_dataInSRRnd_T_3, _dataInSRRnd_T_4) @[Cat.scala 33:92]
    node _dataInSRRnd_T_6 = add(_dataInSRRnd_T_2, _dataInSRRnd_T_5) @[FFTEngine.scala 277:90]
    node dataInSRRnd = tail(_dataInSRRnd_T_6, 1) @[FFTEngine.scala 277:90]
    node _dataInSIRnd_T = bits(dataInIPre[_dataInSI_T_1], 15, 15) @[FFTEngine.scala 278:39]
    node _dataInSIRnd_T_1 = bits(dataInIPre[_dataInSI_T_1], 15, 1) @[FFTEngine.scala 278:67]
    node _dataInSIRnd_T_2 = cat(_dataInSIRnd_T, _dataInSIRnd_T_1) @[Cat.scala 33:92]
    node _dataInSIRnd_T_3 = mux(UInt<1>("h0"), UInt<15>("h7fff"), UInt<15>("h0")) @[Bitwise.scala 77:12]
    node _dataInSIRnd_T_4 = bits(dataInIPre[_dataInSI_T_1], 0, 0) @[FFTEngine.scala 278:133]
    node _dataInSIRnd_T_5 = cat(_dataInSIRnd_T_3, _dataInSIRnd_T_4) @[Cat.scala 33:92]
    node _dataInSIRnd_T_6 = add(_dataInSIRnd_T_2, _dataInSIRnd_T_5) @[FFTEngine.scala 278:90]
    node dataInSIRnd = tail(_dataInSIRnd_T_6, 1) @[FFTEngine.scala 278:90]
    node _dataInTRRnd_T = bits(dataInRPre[_dataInTR_T_1], 15, 15) @[FFTEngine.scala 279:39]
    node _dataInTRRnd_T_1 = bits(dataInRPre[_dataInTR_T_1], 15, 1) @[FFTEngine.scala 279:67]
    node _dataInTRRnd_T_2 = cat(_dataInTRRnd_T, _dataInTRRnd_T_1) @[Cat.scala 33:92]
    node _dataInTRRnd_T_3 = mux(UInt<1>("h0"), UInt<15>("h7fff"), UInt<15>("h0")) @[Bitwise.scala 77:12]
    node _dataInTRRnd_T_4 = bits(dataInRPre[_dataInTR_T_1], 0, 0) @[FFTEngine.scala 279:133]
    node _dataInTRRnd_T_5 = cat(_dataInTRRnd_T_3, _dataInTRRnd_T_4) @[Cat.scala 33:92]
    node _dataInTRRnd_T_6 = add(_dataInTRRnd_T_2, _dataInTRRnd_T_5) @[FFTEngine.scala 279:90]
    node dataInTRRnd = tail(_dataInTRRnd_T_6, 1) @[FFTEngine.scala 279:90]
    node _dataInTIRnd_T = bits(dataInIPre[_dataInTI_T_1], 15, 15) @[FFTEngine.scala 280:39]
    node _dataInTIRnd_T_1 = bits(dataInIPre[_dataInTI_T_1], 15, 1) @[FFTEngine.scala 280:67]
    node _dataInTIRnd_T_2 = cat(_dataInTIRnd_T, _dataInTIRnd_T_1) @[Cat.scala 33:92]
    node _dataInTIRnd_T_3 = mux(UInt<1>("h0"), UInt<15>("h7fff"), UInt<15>("h0")) @[Bitwise.scala 77:12]
    node _dataInTIRnd_T_4 = bits(dataInIPre[_dataInTI_T_1], 0, 0) @[FFTEngine.scala 280:133]
    node _dataInTIRnd_T_5 = cat(_dataInTIRnd_T_3, _dataInTIRnd_T_4) @[Cat.scala 33:92]
    node _dataInTIRnd_T_6 = add(_dataInTIRnd_T_2, _dataInTIRnd_T_5) @[FFTEngine.scala 280:90]
    node dataInTIRnd = tail(_dataInTIRnd_T_6, 1) @[FFTEngine.scala 280:90]
    node dataInSR1c = mux(io.fftRShiftP0[phaseCount], dataInSRRnd, dataInRPre[_dataInSR_T_1]) @[FFTEngine.scala 282:29]
    node dataInSI1c = mux(io.fftRShiftP0[phaseCount], dataInSIRnd, dataInIPre[_dataInSI_T_1]) @[FFTEngine.scala 283:29]
    node dataInTR1c = mux(io.fftRShiftP0[phaseCount], dataInTRRnd, dataInRPre[_dataInTR_T_1]) @[FFTEngine.scala 284:29]
    node dataInTI1c = mux(io.fftRShiftP0[phaseCount], dataInTIRnd, dataInIPre[_dataInTI_T_1]) @[FFTEngine.scala 285:29]
    reg nk1c : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when UInt<1>("h1") : @[Reg.scala 36:18]
      nk1c <= nk[0] @[Reg.scala 36:22]
    node _twiLutIdx1c_T = bits(nk1c, 1, 0) @[FFTEngine.scala 289:35]
    node twiLutIdx1c = cat(_twiLutIdx1c_T, UInt<1>("h0")) @[Cat.scala 33:92]
    node twiLutCaseIdx1c = mux(isFFT, UInt<2>("h0"), UInt<2>("h1")) @[FFTEngine.scala 291:34]
    inst fftTwiddle of FFTTwiddle @[FFTEngine.scala 293:32]
    fftTwiddle.io.nk <= twiLutIdx1c @[FFTEngine.scala 294:26]
    fftTwiddle.io.twiLutCaseIndex <= twiLutCaseIdx1c @[FFTEngine.scala 295:39]
    reg dataInSR2c : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when kernelState1c : @[Reg.scala 36:18]
      dataInSR2c <= dataInSR1c @[Reg.scala 36:22]
    reg dataInSI2c : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when kernelState1c : @[Reg.scala 36:18]
      dataInSI2c <= dataInSI1c @[Reg.scala 36:22]
    reg dataInTR2c : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when kernelState1c : @[Reg.scala 36:18]
      dataInTR2c <= dataInTR1c @[Reg.scala 36:22]
    reg dataInTI2c : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when kernelState1c : @[Reg.scala 36:18]
      dataInTI2c <= dataInTI1c @[Reg.scala 36:22]
    node _wR2c_T = mux(UInt<1>("h0"), UInt<5>("h1f"), UInt<5>("h0")) @[Bitwise.scala 77:12]
    node _wR2c_T_1 = cat(fftTwiddle.io.wR, _wR2c_T) @[Cat.scala 33:92]
    reg wR2c : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when kernelState1c : @[Reg.scala 36:18]
      wR2c <= _wR2c_T_1 @[Reg.scala 36:22]
    node _wI2c_T = mux(UInt<1>("h0"), UInt<5>("h1f"), UInt<5>("h0")) @[Bitwise.scala 77:12]
    node _wI2c_T_1 = cat(fftTwiddle.io.wI, _wI2c_T) @[Cat.scala 33:92]
    reg wI2c : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when kernelState1c : @[Reg.scala 36:18]
      wI2c <= _wI2c_T_1 @[Reg.scala 36:22]
    node _addTRI_T = bits(dataInTR2c, 15, 15) @[FFTEngine.scala 312:38]
    node _addTRI_T_1 = bits(_addTRI_T, 0, 0) @[Bitwise.scala 77:15]
    node _addTRI_T_2 = mux(_addTRI_T_1, UInt<2>("h3"), UInt<2>("h0")) @[Bitwise.scala 77:12]
    node _addTRI_T_3 = cat(_addTRI_T_2, dataInTR2c) @[Cat.scala 33:92]
    node _addTRI_T_4 = bits(dataInTI2c, 15, 15) @[FFTEngine.scala 312:83]
    node _addTRI_T_5 = bits(_addTRI_T_4, 0, 0) @[Bitwise.scala 77:15]
    node _addTRI_T_6 = mux(_addTRI_T_5, UInt<2>("h3"), UInt<2>("h0")) @[Bitwise.scala 77:12]
    node _addTRI_T_7 = cat(_addTRI_T_6, dataInTI2c) @[Cat.scala 33:92]
    node _addTRI_T_8 = add(_addTRI_T_3, _addTRI_T_7) @[FFTEngine.scala 312:65]
    node addTRI = tail(_addTRI_T_8, 1) @[FFTEngine.scala 312:65]
    node _addWRI_T = bits(wR2c, 16, 16) @[FFTEngine.scala 313:30]
    node _addWRI_T_1 = cat(_addWRI_T, wR2c) @[Cat.scala 33:92]
    node _addWRI_T_2 = bits(wI2c, 16, 16) @[FFTEngine.scala 313:66]
    node _addWRI_T_3 = cat(_addWRI_T_2, wI2c) @[Cat.scala 33:92]
    node _addWRI_T_4 = add(_addWRI_T_1, _addWRI_T_3) @[FFTEngine.scala 313:56]
    node addWRI = tail(_addWRI_T_4, 1) @[FFTEngine.scala 313:56]
    inst fftMultiply of FFTMultiply @[FFTEngine.scala 314:33]
    fftMultiply.io.a <= addTRI @[FFTEngine.scala 315:26]
    fftMultiply.io.b <= addWRI @[FFTEngine.scala 316:26]
    fftMultiply.io.tc <= UInt<1>("h1") @[FFTEngine.scala 317:27]
    node _multRPre_T = bits(dataInTR2c, 15, 15) @[FFTEngine.scala 320:55]
    node _multRPre_T_1 = bits(_multRPre_T, 0, 0) @[Bitwise.scala 77:15]
    node _multRPre_T_2 = mux(_multRPre_T_1, UInt<17>("h1ffff"), UInt<17>("h0")) @[Bitwise.scala 77:12]
    node _multRPre_T_3 = cat(_multRPre_T_2, dataInTR2c) @[Cat.scala 33:92]
    node _multRPre_T_4 = bits(wR2c, 16, 16) @[FFTEngine.scala 320:115]
    node _multRPre_T_5 = bits(_multRPre_T_4, 0, 0) @[Bitwise.scala 77:15]
    node _multRPre_T_6 = mux(_multRPre_T_5, UInt<16>("hffff"), UInt<16>("h0")) @[Bitwise.scala 77:12]
    node _multRPre_T_7 = cat(_multRPre_T_6, wR2c) @[Cat.scala 33:92]
    node multRPre = mul(_multRPre_T_3, _multRPre_T_7) @[FFTEngine.scala 320:82]
    node multR = bits(multRPre, 32, 0) @[FFTEngine.scala 321:29]
    node _multIPre_T = bits(dataInTI2c, 15, 15) @[FFTEngine.scala 323:55]
    node _multIPre_T_1 = bits(_multIPre_T, 0, 0) @[Bitwise.scala 77:15]
    node _multIPre_T_2 = mux(_multIPre_T_1, UInt<17>("h1ffff"), UInt<17>("h0")) @[Bitwise.scala 77:12]
    node _multIPre_T_3 = cat(_multIPre_T_2, dataInTR2c) @[Cat.scala 33:92]
    node _multIPre_T_4 = bits(wI2c, 16, 16) @[FFTEngine.scala 323:115]
    node _multIPre_T_5 = bits(_multIPre_T_4, 0, 0) @[Bitwise.scala 77:15]
    node _multIPre_T_6 = mux(_multIPre_T_5, UInt<16>("hffff"), UInt<16>("h0")) @[Bitwise.scala 77:12]
    node _multIPre_T_7 = cat(_multIPre_T_6, wI2c) @[Cat.scala 33:92]
    node multIPre = mul(_multIPre_T_3, _multIPre_T_7) @[FFTEngine.scala 323:82]
    node multI = bits(multIPre, 32, 0) @[FFTEngine.scala 324:29]
    node _qR2c_T = bits(multR, 32, 32) @[FFTEngine.scala 326:29]
    node _qR2c_T_1 = bits(multR, 30, 15) @[FFTEngine.scala 326:60]
    node _qR2c_T_2 = cat(_qR2c_T, _qR2c_T_1) @[Cat.scala 33:92]
    node _qR2c_T_3 = bits(multI, 32, 32) @[FFTEngine.scala 326:117]
    node _qR2c_T_4 = bits(multI, 30, 15) @[FFTEngine.scala 326:148]
    node _qR2c_T_5 = cat(_qR2c_T_3, _qR2c_T_4) @[Cat.scala 33:92]
    node _qR2c_T_6 = sub(_qR2c_T_2, _qR2c_T_5) @[FFTEngine.scala 326:106]
    node qR2c = tail(_qR2c_T_6, 1) @[FFTEngine.scala 326:106]
    node _qI2c_T = bits(fftMultiply.io.product, 35, 35) @[FFTEngine.scala 327:29]
    node _qI2c_T_1 = bits(fftMultiply.io.product, 30, 15) @[FFTEngine.scala 327:64]
    node _qI2c_T_2 = cat(_qI2c_T, _qI2c_T_1) @[Cat.scala 33:92]
    node _qI2c_T_3 = bits(multR, 32, 32) @[FFTEngine.scala 327:121]
    node _qI2c_T_4 = bits(multR, 30, 15) @[FFTEngine.scala 327:152]
    node _qI2c_T_5 = cat(_qI2c_T_3, _qI2c_T_4) @[Cat.scala 33:92]
    node _qI2c_T_6 = sub(_qI2c_T_2, _qI2c_T_5) @[FFTEngine.scala 327:110]
    node _qI2c_T_7 = tail(_qI2c_T_6, 1) @[FFTEngine.scala 327:110]
    node _qI2c_T_8 = bits(multI, 32, 32) @[FFTEngine.scala 327:209]
    node _qI2c_T_9 = bits(multI, 30, 15) @[FFTEngine.scala 327:240]
    node _qI2c_T_10 = cat(_qI2c_T_8, _qI2c_T_9) @[Cat.scala 33:92]
    node _qI2c_T_11 = sub(_qI2c_T_7, _qI2c_T_10) @[FFTEngine.scala 327:198]
    node qI2c = tail(_qI2c_T_11, 1) @[FFTEngine.scala 327:198]
    reg sR3c : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when kernelState2c : @[Reg.scala 36:18]
      sR3c <= dataInSR2c @[Reg.scala 36:22]
    reg sI3c : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when kernelState2c : @[Reg.scala 36:18]
      sI3c <= dataInSI2c @[Reg.scala 36:22]
    reg qR3c : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when kernelState2c : @[Reg.scala 36:18]
      qR3c <= qR2c @[Reg.scala 36:22]
    reg qI3c : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when kernelState2c : @[Reg.scala 36:18]
      qI3c <= qI2c @[Reg.scala 36:22]
    node _xR3cPre_T = bits(sR3c, 15, 15) @[FFTEngine.scala 335:39]
    node _xR3cPre_T_1 = bits(_xR3cPre_T, 0, 0) @[Bitwise.scala 77:15]
    node _xR3cPre_T_2 = mux(_xR3cPre_T_1, UInt<2>("h3"), UInt<2>("h0")) @[Bitwise.scala 77:12]
    node _xR3cPre_T_3 = cat(_xR3cPre_T_2, sR3c) @[Cat.scala 33:92]
    node _xR3cPre_T_4 = bits(qR3c, 16, 16) @[FFTEngine.scala 335:76]
    node _xR3cPre_T_5 = cat(_xR3cPre_T_4, qR3c) @[Cat.scala 33:92]
    node _xR3cPre_T_6 = add(_xR3cPre_T_3, _xR3cPre_T_5) @[FFTEngine.scala 335:66]
    node xR3cPre = tail(_xR3cPre_T_6, 1) @[FFTEngine.scala 335:66]
    node _xI3cPre_T = bits(sI3c, 15, 15) @[FFTEngine.scala 336:39]
    node _xI3cPre_T_1 = bits(_xI3cPre_T, 0, 0) @[Bitwise.scala 77:15]
    node _xI3cPre_T_2 = mux(_xI3cPre_T_1, UInt<2>("h3"), UInt<2>("h0")) @[Bitwise.scala 77:12]
    node _xI3cPre_T_3 = cat(_xI3cPre_T_2, sI3c) @[Cat.scala 33:92]
    node _xI3cPre_T_4 = bits(qI3c, 16, 16) @[FFTEngine.scala 336:76]
    node _xI3cPre_T_5 = cat(_xI3cPre_T_4, qI3c) @[Cat.scala 33:92]
    node _xI3cPre_T_6 = add(_xI3cPre_T_3, _xI3cPre_T_5) @[FFTEngine.scala 336:66]
    node xI3cPre = tail(_xI3cPre_T_6, 1) @[FFTEngine.scala 336:66]
    node _xR3c_T = bits(xR3cPre, 17, 17) @[FFTEngine.scala 338:32]
    node _xR3c_T_1 = bits(xR3cPre, 16, 16) @[FFTEngine.scala 338:60]
    node _xR3c_T_2 = xor(_xR3c_T, _xR3c_T_1) @[FFTEngine.scala 338:51]
    node _xR3c_T_3 = bits(xR3cPre, 17, 17) @[FFTEngine.scala 338:92]
    node _xR3c_T_4 = bits(xR3cPre, 17, 17) @[FFTEngine.scala 338:143]
    node _xR3c_T_5 = bits(_xR3c_T_4, 0, 0) @[Bitwise.scala 77:15]
    node _xR3c_T_6 = mux(_xR3c_T_5, UInt<15>("h7fff"), UInt<15>("h0")) @[Bitwise.scala 77:12]
    node _xR3c_T_7 = not(_xR3c_T_6) @[FFTEngine.scala 338:112]
    node _xR3c_T_8 = cat(_xR3c_T_3, _xR3c_T_7) @[Cat.scala 33:92]
    node _xR3c_T_9 = bits(xR3cPre, 17, 17) @[FFTEngine.scala 338:177]
    node _xR3c_T_10 = bits(xR3cPre, 15, 15) @[FFTEngine.scala 338:205]
    node _xR3c_T_11 = xor(_xR3c_T_9, _xR3c_T_10) @[FFTEngine.scala 338:196]
    node _xR3c_T_12 = bits(xR3cPre, 17, 17) @[FFTEngine.scala 338:237]
    node _xR3c_T_13 = bits(xR3cPre, 17, 17) @[FFTEngine.scala 338:288]
    node _xR3c_T_14 = bits(_xR3c_T_13, 0, 0) @[Bitwise.scala 77:15]
    node _xR3c_T_15 = mux(_xR3c_T_14, UInt<15>("h7fff"), UInt<15>("h0")) @[Bitwise.scala 77:12]
    node _xR3c_T_16 = not(_xR3c_T_15) @[FFTEngine.scala 338:257]
    node _xR3c_T_17 = cat(_xR3c_T_12, _xR3c_T_16) @[Cat.scala 33:92]
    node _xR3c_T_18 = bits(xR3cPre, 15, 0) @[FFTEngine.scala 338:317]
    node _xR3c_T_19 = mux(_xR3c_T_11, _xR3c_T_17, _xR3c_T_18) @[FFTEngine.scala 338:168]
    node xR3c = mux(_xR3c_T_2, _xR3c_T_8, _xR3c_T_19) @[FFTEngine.scala 338:23]
    node _xI3c_T = bits(xI3cPre, 17, 17) @[FFTEngine.scala 339:32]
    node _xI3c_T_1 = bits(xI3cPre, 16, 16) @[FFTEngine.scala 339:60]
    node _xI3c_T_2 = xor(_xI3c_T, _xI3c_T_1) @[FFTEngine.scala 339:51]
    node _xI3c_T_3 = bits(xI3cPre, 17, 17) @[FFTEngine.scala 339:92]
    node _xI3c_T_4 = bits(xI3cPre, 17, 17) @[FFTEngine.scala 339:143]
    node _xI3c_T_5 = bits(_xI3c_T_4, 0, 0) @[Bitwise.scala 77:15]
    node _xI3c_T_6 = mux(_xI3c_T_5, UInt<15>("h7fff"), UInt<15>("h0")) @[Bitwise.scala 77:12]
    node _xI3c_T_7 = not(_xI3c_T_6) @[FFTEngine.scala 339:112]
    node _xI3c_T_8 = cat(_xI3c_T_3, _xI3c_T_7) @[Cat.scala 33:92]
    node _xI3c_T_9 = bits(xI3cPre, 17, 17) @[FFTEngine.scala 339:177]
    node _xI3c_T_10 = bits(xI3cPre, 15, 15) @[FFTEngine.scala 339:205]
    node _xI3c_T_11 = xor(_xI3c_T_9, _xI3c_T_10) @[FFTEngine.scala 339:196]
    node _xI3c_T_12 = bits(xI3cPre, 17, 17) @[FFTEngine.scala 339:237]
    node _xI3c_T_13 = bits(xI3cPre, 17, 17) @[FFTEngine.scala 339:288]
    node _xI3c_T_14 = bits(_xI3c_T_13, 0, 0) @[Bitwise.scala 77:15]
    node _xI3c_T_15 = mux(_xI3c_T_14, UInt<15>("h7fff"), UInt<15>("h0")) @[Bitwise.scala 77:12]
    node _xI3c_T_16 = not(_xI3c_T_15) @[FFTEngine.scala 339:257]
    node _xI3c_T_17 = cat(_xI3c_T_12, _xI3c_T_16) @[Cat.scala 33:92]
    node _xI3c_T_18 = bits(xI3cPre, 15, 0) @[FFTEngine.scala 339:317]
    node _xI3c_T_19 = mux(_xI3c_T_11, _xI3c_T_17, _xI3c_T_18) @[FFTEngine.scala 339:168]
    node xI3c = mux(_xI3c_T_2, _xI3c_T_8, _xI3c_T_19) @[FFTEngine.scala 339:23]
    node _yR3cPre_T = bits(sR3c, 15, 15) @[FFTEngine.scala 341:39]
    node _yR3cPre_T_1 = bits(_yR3cPre_T, 0, 0) @[Bitwise.scala 77:15]
    node _yR3cPre_T_2 = mux(_yR3cPre_T_1, UInt<2>("h3"), UInt<2>("h0")) @[Bitwise.scala 77:12]
    node _yR3cPre_T_3 = cat(_yR3cPre_T_2, sR3c) @[Cat.scala 33:92]
    node _yR3cPre_T_4 = bits(qR3c, 16, 16) @[FFTEngine.scala 341:76]
    node _yR3cPre_T_5 = cat(_yR3cPre_T_4, qR3c) @[Cat.scala 33:92]
    node _yR3cPre_T_6 = sub(_yR3cPre_T_3, _yR3cPre_T_5) @[FFTEngine.scala 341:66]
    node yR3cPre = tail(_yR3cPre_T_6, 1) @[FFTEngine.scala 341:66]
    node _yI3cPre_T = bits(sI3c, 15, 15) @[FFTEngine.scala 342:39]
    node _yI3cPre_T_1 = bits(_yI3cPre_T, 0, 0) @[Bitwise.scala 77:15]
    node _yI3cPre_T_2 = mux(_yI3cPre_T_1, UInt<2>("h3"), UInt<2>("h0")) @[Bitwise.scala 77:12]
    node _yI3cPre_T_3 = cat(_yI3cPre_T_2, sI3c) @[Cat.scala 33:92]
    node _yI3cPre_T_4 = bits(qI3c, 16, 16) @[FFTEngine.scala 342:76]
    node _yI3cPre_T_5 = cat(_yI3cPre_T_4, qI3c) @[Cat.scala 33:92]
    node _yI3cPre_T_6 = sub(_yI3cPre_T_3, _yI3cPre_T_5) @[FFTEngine.scala 342:66]
    node yI3cPre = tail(_yI3cPre_T_6, 1) @[FFTEngine.scala 342:66]
    node _yR3c_T = bits(yR3cPre, 17, 17) @[FFTEngine.scala 344:32]
    node _yR3c_T_1 = bits(yR3cPre, 16, 16) @[FFTEngine.scala 344:60]
    node _yR3c_T_2 = xor(_yR3c_T, _yR3c_T_1) @[FFTEngine.scala 344:51]
    node _yR3c_T_3 = bits(yR3cPre, 17, 17) @[FFTEngine.scala 344:92]
    node _yR3c_T_4 = bits(yR3cPre, 17, 17) @[FFTEngine.scala 344:143]
    node _yR3c_T_5 = bits(_yR3c_T_4, 0, 0) @[Bitwise.scala 77:15]
    node _yR3c_T_6 = mux(_yR3c_T_5, UInt<15>("h7fff"), UInt<15>("h0")) @[Bitwise.scala 77:12]
    node _yR3c_T_7 = not(_yR3c_T_6) @[FFTEngine.scala 344:112]
    node _yR3c_T_8 = cat(_yR3c_T_3, _yR3c_T_7) @[Cat.scala 33:92]
    node _yR3c_T_9 = bits(yR3cPre, 17, 17) @[FFTEngine.scala 344:177]
    node _yR3c_T_10 = bits(yR3cPre, 15, 15) @[FFTEngine.scala 344:205]
    node _yR3c_T_11 = xor(_yR3c_T_9, _yR3c_T_10) @[FFTEngine.scala 344:196]
    node _yR3c_T_12 = bits(yR3cPre, 17, 17) @[FFTEngine.scala 344:237]
    node _yR3c_T_13 = bits(yR3cPre, 17, 17) @[FFTEngine.scala 344:288]
    node _yR3c_T_14 = bits(_yR3c_T_13, 0, 0) @[Bitwise.scala 77:15]
    node _yR3c_T_15 = mux(_yR3c_T_14, UInt<15>("h7fff"), UInt<15>("h0")) @[Bitwise.scala 77:12]
    node _yR3c_T_16 = not(_yR3c_T_15) @[FFTEngine.scala 344:257]
    node _yR3c_T_17 = cat(_yR3c_T_12, _yR3c_T_16) @[Cat.scala 33:92]
    node _yR3c_T_18 = bits(yR3cPre, 15, 0) @[FFTEngine.scala 344:317]
    node _yR3c_T_19 = mux(_yR3c_T_11, _yR3c_T_17, _yR3c_T_18) @[FFTEngine.scala 344:168]
    node yR3c = mux(_yR3c_T_2, _yR3c_T_8, _yR3c_T_19) @[FFTEngine.scala 344:23]
    node _yI3c_T = bits(yI3cPre, 17, 17) @[FFTEngine.scala 345:32]
    node _yI3c_T_1 = bits(yI3cPre, 16, 16) @[FFTEngine.scala 345:60]
    node _yI3c_T_2 = xor(_yI3c_T, _yI3c_T_1) @[FFTEngine.scala 345:51]
    node _yI3c_T_3 = bits(yI3cPre, 17, 17) @[FFTEngine.scala 345:92]
    node _yI3c_T_4 = bits(yI3cPre, 17, 17) @[FFTEngine.scala 345:143]
    node _yI3c_T_5 = bits(_yI3c_T_4, 0, 0) @[Bitwise.scala 77:15]
    node _yI3c_T_6 = mux(_yI3c_T_5, UInt<15>("h7fff"), UInt<15>("h0")) @[Bitwise.scala 77:12]
    node _yI3c_T_7 = not(_yI3c_T_6) @[FFTEngine.scala 345:112]
    node _yI3c_T_8 = cat(_yI3c_T_3, _yI3c_T_7) @[Cat.scala 33:92]
    node _yI3c_T_9 = bits(yI3cPre, 17, 17) @[FFTEngine.scala 345:177]
    node _yI3c_T_10 = bits(yI3cPre, 15, 15) @[FFTEngine.scala 345:205]
    node _yI3c_T_11 = xor(_yI3c_T_9, _yI3c_T_10) @[FFTEngine.scala 345:196]
    node _yI3c_T_12 = bits(yI3cPre, 17, 17) @[FFTEngine.scala 345:237]
    node _yI3c_T_13 = bits(yI3cPre, 17, 17) @[FFTEngine.scala 345:288]
    node _yI3c_T_14 = bits(_yI3c_T_13, 0, 0) @[Bitwise.scala 77:15]
    node _yI3c_T_15 = mux(_yI3c_T_14, UInt<15>("h7fff"), UInt<15>("h0")) @[Bitwise.scala 77:12]
    node _yI3c_T_16 = not(_yI3c_T_15) @[FFTEngine.scala 345:257]
    node _yI3c_T_17 = cat(_yI3c_T_12, _yI3c_T_16) @[Cat.scala 33:92]
    node _yI3c_T_18 = bits(yI3cPre, 15, 0) @[FFTEngine.scala 345:317]
    node _yI3c_T_19 = mux(_yI3c_T_11, _yI3c_T_17, _yI3c_T_18) @[FFTEngine.scala 345:168]
    node yI3c = mux(_yI3c_T_2, _yI3c_T_8, _yI3c_T_19) @[FFTEngine.scala 345:23]
    node _T_28 = or(addrSBankSel3c[0], UInt<1>("h0"))
    node _T_29 = bits(_T_28, 0, 0)
    node _io_writeEnableSram0Bank_T = and(srcBuffer, kernelState3c) @[FFTEngine.scala 347:65]
    io.writeEnableSram0Bank[_T_29] <= _io_writeEnableSram0Bank_T @[FFTEngine.scala 347:52]
    node _T_30 = or(addrTBankSel3c[0], UInt<1>("h0"))
    node _T_31 = bits(_T_30, 0, 0)
    node _io_writeEnableSram0Bank_T_1 = and(srcBuffer, kernelState3c) @[FFTEngine.scala 348:65]
    io.writeEnableSram0Bank[_T_31] <= _io_writeEnableSram0Bank_T_1 @[FFTEngine.scala 348:52]
    node _T_32 = or(addrSBankSel3c[0], UInt<1>("h0"))
    node _T_33 = bits(_T_32, 0, 0)
    node _io_writeEnableSram1Bank_T = eq(srcBuffer, UInt<1>("h0")) @[FFTEngine.scala 349:55]
    node _io_writeEnableSram1Bank_T_1 = and(_io_writeEnableSram1Bank_T, kernelState3c) @[FFTEngine.scala 349:66]
    io.writeEnableSram1Bank[_T_33] <= _io_writeEnableSram1Bank_T_1 @[FFTEngine.scala 349:52]
    node _T_34 = or(addrTBankSel3c[0], UInt<1>("h0"))
    node _T_35 = bits(_T_34, 0, 0)
    node _io_writeEnableSram1Bank_T_2 = eq(srcBuffer, UInt<1>("h0")) @[FFTEngine.scala 350:55]
    node _io_writeEnableSram1Bank_T_3 = and(_io_writeEnableSram1Bank_T_2, kernelState3c) @[FFTEngine.scala 350:66]
    io.writeEnableSram1Bank[_T_35] <= _io_writeEnableSram1Bank_T_3 @[FFTEngine.scala 350:52]
    node _T_36 = eq(srcBuffer, UInt<1>("h0")) @[FFTEngine.scala 352:24]
    when _T_36 : @[FFTEngine.scala 352:33]
      node _T_37 = or(addrSBankSel[0], UInt<1>("h0"))
      node _T_38 = bits(_T_37, 0, 0)
      node _io_addrSram0Bank_T = bits(addrS_0, 1, 0) @[FFTEngine.scala 353:58]
      io.addrSram0Bank[_T_38] <= _io_addrSram0Bank_T @[FFTEngine.scala 353:47]
      node _T_39 = or(addrTBankSel[0], UInt<1>("h0"))
      node _T_40 = bits(_T_39, 0, 0)
      node _io_addrSram0Bank_T_1 = bits(addrT_0, 1, 0) @[FFTEngine.scala 354:58]
      io.addrSram0Bank[_T_40] <= _io_addrSram0Bank_T_1 @[FFTEngine.scala 354:47]
      node _T_41 = or(addrSBankSel3c[0], UInt<1>("h0"))
      node _T_42 = bits(_T_41, 0, 0)
      io.addrSram1Bank[_T_42] <= addrS3c @[FFTEngine.scala 355:49]
      node _T_43 = or(addrTBankSel3c[0], UInt<1>("h0"))
      node _T_44 = bits(_T_43, 0, 0)
      io.addrSram1Bank[_T_44] <= addrT3c @[FFTEngine.scala 356:49]
    else :
      node _T_45 = or(addrSBankSel3c[0], UInt<1>("h0"))
      node _T_46 = bits(_T_45, 0, 0)
      io.addrSram0Bank[_T_46] <= addrS3c @[FFTEngine.scala 358:49]
      node _T_47 = or(addrTBankSel3c[0], UInt<1>("h0"))
      node _T_48 = bits(_T_47, 0, 0)
      io.addrSram0Bank[_T_48] <= addrT3c @[FFTEngine.scala 359:49]
      node _T_49 = or(addrSBankSel[0], UInt<1>("h0"))
      node _T_50 = bits(_T_49, 0, 0)
      node _io_addrSram1Bank_T = bits(addrS_0, 1, 0) @[FFTEngine.scala 360:58]
      io.addrSram1Bank[_T_50] <= _io_addrSram1Bank_T @[FFTEngine.scala 360:47]
      node _T_51 = or(addrTBankSel[0], UInt<1>("h0"))
      node _T_52 = bits(_T_51, 0, 0)
      node _io_addrSram1Bank_T_1 = bits(addrT_0, 1, 0) @[FFTEngine.scala 361:58]
      io.addrSram1Bank[_T_52] <= _io_addrSram1Bank_T_1 @[FFTEngine.scala 361:47]
    node writeDataSram0SPre = cat(xI3c, xR3c) @[Cat.scala 33:92]
    node writeDataSram0TPre = cat(yI3c, yR3c) @[Cat.scala 33:92]
    node _T_53 = or(addrSBankSel3c[0], UInt<1>("h0"))
    node _T_54 = bits(_T_53, 0, 0)
    io.writeDataSram0Bank[_T_54] <= writeDataSram0SPre @[FFTEngine.scala 367:50]
    node _T_55 = or(addrTBankSel3c[0], UInt<1>("h0"))
    node _T_56 = bits(_T_55, 0, 0)
    io.writeDataSram0Bank[_T_56] <= writeDataSram0TPre @[FFTEngine.scala 368:50]
    node _T_57 = or(addrSBankSel3c[0], UInt<1>("h0"))
    node _T_58 = bits(_T_57, 0, 0)
    io.writeDataSram1Bank[_T_58] <= writeDataSram0SPre @[FFTEngine.scala 369:50]
    node _T_59 = or(addrTBankSel3c[0], UInt<1>("h0"))
    node _T_60 = bits(_T_59, 0, 0)
    io.writeDataSram1Bank[_T_60] <= writeDataSram0TPre @[FFTEngine.scala 370:50]
    node donePre = eq(stateReg, UInt<3>("h4")) @[FFTEngine.scala 373:29]
    reg fftDoneReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[FFTEngine.scala 374:29]
    fftDoneReg <= donePre @[FFTEngine.scala 374:29]
    io.fftDone <= fftDoneReg @[FFTEngine.scala 375:16]

